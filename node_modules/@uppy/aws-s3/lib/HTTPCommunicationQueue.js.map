{"version":3,"names":["pausingUploadReason","throwIfAborted","removeMetadataFromURL","urlString","urlObject","URL","search","hash","href","_abortMultipartUpload","_classPrivateFieldLooseKey","_cache","_createMultipartUpload","_fetchSignature","_getUploadParameters","_listParts","_previousRetryDelay","_requests","_retryDelays","_sendCompletionRequest","_setS3MultipartState","_uploadPartBytes","_getFile","_shouldRetry","_nonMultipartUpload","HTTPCommunicationQueue","constructor","requests","options","setS3MultipartState","getFile","Object","defineProperty","value","_nonMultipartUpload2","_shouldRetry2","writable","WeakMap","_classPrivateFieldLooseBase","setOptions","wrapPromiseFunction","abortMultipartUpload","priority","createMultipartUpload","signPart","listParts","completeMultipartUpload","_options$retryDelays","retryDelays","uploadPartBytes","Infinity","getUploadParameters","getUploadId","file","signal","cachedResult","get","data","promise","abortPromise","abort","reason","delete","addEventListener","once","set","then","result","removeEventListener","abortFileUpload","create","awaitedResult","uploadFile","chunks","length","shouldUseMultipart","uploadId","key","parts","Promise","all","map","chunk","i","uploadChunk","abortOn","err","cause","name","restoreUploadFile","uploadIdAndKey","resumeUploadFile","alreadyUploadedParts","partNumber","alreadyUploadedInfo","find","_ref","PartNumber","setAsUploaded","ETag","signatureRetryIterator","values","chunkRetryIterator","shouldRetrySignature","next","done","chunkData","getData","onProgress","onComplete","signature","body","timeout","aborted","resolve","setTimeout","size","retryDelayIterator","_err$source","status","source","message","isPaused","limit","rateLimit","navigator","onLine","pause","window","resume","method","url","fields","headers","toUpperCase","formData","FormData","entries","forEach","_ref2","location"],"sources":["HTTPCommunicationQueue.ts"],"sourcesContent":["import type { Meta, Body, UppyFile } from '@uppy/utils/lib/UppyFile'\nimport type {\n  RateLimitedQueue,\n  WrapPromiseFunctionType,\n} from '@uppy/utils/lib/RateLimitedQueue'\nimport { pausingUploadReason, type Chunk } from './MultipartUploader.ts'\nimport type AwsS3Multipart from './index.ts'\nimport { throwIfAborted } from './utils.ts'\nimport type { UploadPartBytesResult, UploadResult } from './utils.ts'\nimport type { AwsS3MultipartOptions, uploadPartBytes } from './index.ts'\n\nfunction removeMetadataFromURL(urlString: string) {\n  const urlObject = new URL(urlString)\n  urlObject.search = ''\n  urlObject.hash = ''\n  return urlObject.href\n}\n\nexport class HTTPCommunicationQueue<M extends Meta, B extends Body> {\n  #abortMultipartUpload!: WrapPromiseFunctionType<\n    AwsS3Multipart<M, B>['abortMultipartUpload']\n  >\n\n  #cache = new WeakMap()\n\n  #createMultipartUpload!: WrapPromiseFunctionType<\n    AwsS3Multipart<M, B>['createMultipartUpload']\n  >\n\n  #fetchSignature!: WrapPromiseFunctionType<AwsS3Multipart<M, B>['signPart']>\n\n  #getUploadParameters!: WrapPromiseFunctionType<\n    AwsS3Multipart<M, B>['getUploadParameters']\n  >\n\n  #listParts!: WrapPromiseFunctionType<AwsS3Multipart<M, B>['listParts']>\n\n  #previousRetryDelay!: number\n\n  #requests\n\n  #retryDelays!: { values: () => Iterator<number> }\n\n  #sendCompletionRequest!: WrapPromiseFunctionType<\n    AwsS3Multipart<M, B>['completeMultipartUpload']\n  >\n\n  #setS3MultipartState\n\n  #uploadPartBytes!: WrapPromiseFunctionType<uploadPartBytes>\n\n  #getFile\n\n  constructor(\n    requests: RateLimitedQueue,\n    options: AwsS3MultipartOptions<M, B>,\n    setS3MultipartState: (file: UppyFile<M, B>, result: UploadResult) => void,\n    getFile: (file: UppyFile<M, B>) => UppyFile<M, B>,\n  ) {\n    this.#requests = requests\n    this.#setS3MultipartState = setS3MultipartState\n    this.#getFile = getFile\n    this.setOptions(options)\n  }\n\n  setOptions(options: Partial<AwsS3MultipartOptions<M, B>>): void {\n    const requests = this.#requests\n\n    if ('abortMultipartUpload' in options) {\n      this.#abortMultipartUpload = requests.wrapPromiseFunction(\n        options.abortMultipartUpload as any,\n        { priority: 1 },\n      )\n    }\n    if ('createMultipartUpload' in options) {\n      this.#createMultipartUpload = requests.wrapPromiseFunction(\n        options.createMultipartUpload as any,\n        { priority: -1 },\n      )\n    }\n    if ('signPart' in options) {\n      this.#fetchSignature = requests.wrapPromiseFunction(\n        options.signPart as any,\n      )\n    }\n    if ('listParts' in options) {\n      this.#listParts = requests.wrapPromiseFunction(options.listParts as any)\n    }\n    if ('completeMultipartUpload' in options) {\n      this.#sendCompletionRequest = requests.wrapPromiseFunction(\n        options.completeMultipartUpload as any,\n        { priority: 1 },\n      )\n    }\n    if ('retryDelays' in options) {\n      this.#retryDelays = options.retryDelays ?? []\n    }\n    if ('uploadPartBytes' in options) {\n      this.#uploadPartBytes = requests.wrapPromiseFunction(\n        options.uploadPartBytes as any,\n        { priority: Infinity },\n      )\n    }\n    if ('getUploadParameters' in options) {\n      this.#getUploadParameters = requests.wrapPromiseFunction(\n        options.getUploadParameters as any,\n      )\n    }\n  }\n\n  async #shouldRetry(err: any, retryDelayIterator: Iterator<number>) {\n    const requests = this.#requests\n    const status = err?.source?.status\n\n    // TODO: this retry logic is taken out of Tus. We should have a centralized place for retrying,\n    // perhaps the rate limited queue, and dedupe all plugins with that.\n    if (status == null) {\n      return false\n    }\n    if (status === 403 && err.message === 'Request has expired') {\n      if (!requests.isPaused) {\n        // We don't want to exhaust the retryDelayIterator as long as there are\n        // more than one request in parallel, to give slower connection a chance\n        // to catch up with the expiry set in Companion.\n        if (requests.limit === 1 || this.#previousRetryDelay == null) {\n          const next = retryDelayIterator.next()\n          if (next == null || next.done) {\n            return false\n          }\n          // If there are more than 1 request done in parallel, the RLQ limit is\n          // decreased and the failed request is requeued after waiting for a bit.\n          // If there is only one request in parallel, the limit can't be\n          // decreased, so we iterate over `retryDelayIterator` as we do for\n          // other failures.\n          // `#previousRetryDelay` caches the value so we can re-use it next time.\n          this.#previousRetryDelay = next.value\n        }\n        // No need to stop the other requests, we just want to lower the limit.\n        requests.rateLimit(0)\n        await new Promise((resolve) =>\n          setTimeout(resolve, this.#previousRetryDelay),\n        )\n      }\n    } else if (status === 429) {\n      // HTTP 429 Too Many Requests => to avoid the whole download to fail, pause all requests.\n      if (!requests.isPaused) {\n        const next = retryDelayIterator.next()\n        if (next == null || next.done) {\n          return false\n        }\n        requests.rateLimit(next.value)\n      }\n    } else if (status > 400 && status < 500 && status !== 409) {\n      // HTTP 4xx, the server won't send anything, it's doesn't make sense to retry\n      return false\n    } else if (typeof navigator !== 'undefined' && navigator.onLine === false) {\n      // The navigator is offline, let's wait for it to come back online.\n      if (!requests.isPaused) {\n        requests.pause()\n        window.addEventListener(\n          'online',\n          () => {\n            requests.resume()\n          },\n          { once: true },\n        )\n      }\n    } else {\n      // Other error code means the request can be retried later.\n      const next = retryDelayIterator.next()\n      if (next == null || next.done) {\n        return false\n      }\n      await new Promise((resolve) => setTimeout(resolve, next.value))\n    }\n    return true\n  }\n\n  async getUploadId(\n    file: UppyFile<M, B>,\n    signal: AbortSignal,\n  ): Promise<UploadResult> {\n    let cachedResult\n    // As the cache is updated asynchronously, there could be a race condition\n    // where we just miss a new result so we loop here until we get nothing back,\n    // at which point it's out turn to create a new cache entry.\n    // eslint-disable-next-line no-cond-assign\n    while ((cachedResult = this.#cache.get(file.data)) != null) {\n      try {\n        return await cachedResult\n      } catch {\n        // In case of failure, we want to ignore the cached error.\n        // At this point, either there's a new cached value, or we'll exit the loop a create a new one.\n      }\n    }\n\n    const promise = this.#createMultipartUpload(this.#getFile(file), signal)\n\n    const abortPromise = () => {\n      promise.abort(signal.reason)\n      this.#cache.delete(file.data)\n    }\n    signal.addEventListener('abort', abortPromise, { once: true })\n    this.#cache.set(file.data, promise)\n    promise.then(\n      async (result) => {\n        signal.removeEventListener('abort', abortPromise)\n        this.#setS3MultipartState(file, result)\n        this.#cache.set(file.data, result)\n      },\n      () => {\n        signal.removeEventListener('abort', abortPromise)\n        this.#cache.delete(file.data)\n      },\n    )\n\n    return promise\n  }\n\n  async abortFileUpload(file: UppyFile<M, B>): Promise<void> {\n    const result = this.#cache.get(file.data)\n    if (result == null) {\n      // If the createMultipartUpload request never was made, we don't\n      // need to send the abortMultipartUpload request.\n      return\n    }\n    // Remove the cache entry right away for follow-up requests do not try to\n    // use the soon-to-be aborted cached values.\n    this.#cache.delete(file.data)\n    this.#setS3MultipartState(file, Object.create(null))\n    let awaitedResult\n    try {\n      awaitedResult = await result\n    } catch {\n      // If the cached result rejects, there's nothing to abort.\n      return\n    }\n    await this.#abortMultipartUpload(this.#getFile(file), awaitedResult)\n  }\n\n  async #nonMultipartUpload(\n    file: UppyFile<M, B>,\n    chunk: Chunk,\n    signal?: AbortSignal,\n  ) {\n    const {\n      method = 'POST',\n      url,\n      fields,\n      headers,\n    } = await this.#getUploadParameters(this.#getFile(file), {\n      signal,\n    }).abortOn(signal)\n\n    let body: FormData | Blob\n    const data = chunk.getData()\n    if (method.toUpperCase() === 'POST') {\n      const formData = new FormData()\n      Object.entries(fields!).forEach(([key, value]) =>\n        formData.set(key, value),\n      )\n      formData.set('file', data)\n      body = formData\n    } else {\n      body = data\n    }\n\n    const { onProgress, onComplete } = chunk\n\n    const result = (await this.#uploadPartBytes({\n      signature: { url, headers, method } as any,\n      body,\n      size: data.size,\n      onProgress,\n      onComplete,\n      signal,\n    }).abortOn(signal)) as unknown as B // todo this doesn't make sense\n\n    // location will be missing from result if CORS is not correctly set up on the bucket.\n    return 'location' in result ? result : (\n        {\n          // todo `url` is not really the final location URL of the resulting file, it's just the base URL of the bucket\n          // https://github.com/transloadit/uppy/issues/5388\n          location: removeMetadataFromURL(url),\n          ...result,\n        }\n      )\n  }\n\n  async uploadFile(\n    file: UppyFile<M, B>,\n    chunks: Chunk[],\n    signal: AbortSignal,\n  ): Promise<B & Partial<UploadPartBytesResult>> {\n    throwIfAborted(signal)\n    if (chunks.length === 1 && !chunks[0].shouldUseMultipart) {\n      return this.#nonMultipartUpload(file, chunks[0], signal)\n    }\n    const { uploadId, key } = await this.getUploadId(file, signal)\n    throwIfAborted(signal)\n    try {\n      const parts = await Promise.all(\n        chunks.map((chunk, i) => this.uploadChunk(file, i + 1, chunk, signal)),\n      )\n      throwIfAborted(signal)\n      return await this.#sendCompletionRequest(\n        this.#getFile(file),\n        { key, uploadId, parts, signal },\n        signal,\n      ).abortOn(signal)\n    } catch (err) {\n      if (err?.cause !== pausingUploadReason && err?.name !== 'AbortError') {\n        // We purposefully don't wait for the promise and ignore its status,\n        // because we want the error `err` to bubble up ASAP to report it to the\n        // user. A failure to abort is not that big of a deal anyway.\n        this.abortFileUpload(file)\n      }\n      throw err\n    }\n  }\n\n  restoreUploadFile(file: UppyFile<M, B>, uploadIdAndKey: UploadResult): void {\n    this.#cache.set(file.data, uploadIdAndKey)\n  }\n\n  async resumeUploadFile(\n    file: UppyFile<M, B>,\n    chunks: Array<Chunk | null>,\n    signal: AbortSignal,\n  ): Promise<B> {\n    throwIfAborted(signal)\n    if (\n      chunks.length === 1 &&\n      chunks[0] != null &&\n      !chunks[0].shouldUseMultipart\n    ) {\n      return this.#nonMultipartUpload(file, chunks[0], signal)\n    }\n    const { uploadId, key } = await this.getUploadId(file, signal)\n    throwIfAborted(signal)\n    const alreadyUploadedParts = await this.#listParts(\n      this.#getFile(file),\n      { uploadId, key, signal },\n      signal,\n    ).abortOn(signal)\n    throwIfAborted(signal)\n    const parts = await Promise.all(\n      chunks.map((chunk, i) => {\n        const partNumber = i + 1\n        const alreadyUploadedInfo = alreadyUploadedParts.find(\n          ({ PartNumber }) => PartNumber === partNumber,\n        )\n        if (alreadyUploadedInfo == null) {\n          return this.uploadChunk(file, partNumber, chunk!, signal)\n        }\n        // Already uploaded chunks are set to null. If we are restoring the upload, we need to mark it as already uploaded.\n        chunk?.setAsUploaded?.()\n        return { PartNumber: partNumber, ETag: alreadyUploadedInfo.ETag }\n      }),\n    )\n    throwIfAborted(signal)\n    return this.#sendCompletionRequest(\n      this.#getFile(file),\n      { key, uploadId, parts, signal },\n      signal,\n    ).abortOn(signal)\n  }\n\n  async uploadChunk(\n    file: UppyFile<M, B>,\n    partNumber: number,\n    chunk: Chunk,\n    signal: AbortSignal,\n  ): Promise<UploadPartBytesResult & { PartNumber: number }> {\n    throwIfAborted(signal)\n    const { uploadId, key } = await this.getUploadId(file, signal)\n\n    const signatureRetryIterator = this.#retryDelays.values()\n    const chunkRetryIterator = this.#retryDelays.values()\n    const shouldRetrySignature = () => {\n      const next = signatureRetryIterator.next()\n      if (next == null || next.done) {\n        return null\n      }\n      return next.value\n    }\n\n    for (;;) {\n      throwIfAborted(signal)\n      const chunkData = chunk.getData()\n      const { onProgress, onComplete } = chunk\n      let signature\n\n      try {\n        signature = await this.#fetchSignature(this.#getFile(file), {\n          uploadId,\n          key,\n          partNumber,\n          body: chunkData,\n          signal,\n        }).abortOn(signal)\n      } catch (err) {\n        const timeout = shouldRetrySignature()\n        if (timeout == null || signal.aborted) {\n          throw err\n        }\n        await new Promise((resolve) => setTimeout(resolve, timeout))\n        // eslint-disable-next-line no-continue\n        continue\n      }\n\n      throwIfAborted(signal)\n      try {\n        return {\n          PartNumber: partNumber,\n          ...(await this.#uploadPartBytes({\n            signature,\n            body: chunkData,\n            size: chunkData.size,\n            onProgress,\n            onComplete,\n            signal,\n          }).abortOn(signal)),\n        }\n      } catch (err) {\n        if (!(await this.#shouldRetry(err, chunkRetryIterator))) throw err\n      }\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]}