{"version":3,"names":["AbortController","MB","defaultOptions","getChunkSize","file","Math","ceil","size","onProgress","onPartComplete","onSuccess","onError","err","ensureInt","value","parseInt","TypeError","pausingUploadReason","Symbol","_abortController","_classPrivateFieldLooseKey","_chunks","_chunkState","_data","_file","_uploadHasStarted","_onError","_onSuccess","_shouldUseMultipart","_isRestoring","_onReject","_maxMultipartParts","_minPartSize","_initChunks","_createUpload","_resumeUpload","_onPartProgress","_onPartComplete","_abortUpload","MultipartUploader","constructor","data","options","_this$options","_this$options$getChun","Object","defineProperty","_abortUpload2","_resumeUpload2","_createUpload2","_initChunks2","writable","cause","_classPrivateFieldLooseBase","index","ev","lengthComputable","uploaded","loaded","totalUploaded","reduce","n","c","etag","done","part","PartNumber","ETag","shouldUseMultipart","uploadId","key","start","signal","aborted","abort","companionComm","restoreUploadFile","pause","opts","really","for","fileSize","Boolean","chunkSize","max","arraySize","floor","Array","offset","j","end","min","getData","i2","slice","onComplete","setAsUploaded","map","uploadFile","then","resumeUploadFile","abortFileUpload","catch","log"],"sources":["MultipartUploader.ts"],"sourcesContent":["import type { Uppy } from '@uppy/core'\nimport { AbortController } from '@uppy/utils/lib/AbortController'\nimport type { Meta, Body, UppyFile } from '@uppy/utils/lib/UppyFile'\nimport type { HTTPCommunicationQueue } from './HTTPCommunicationQueue.ts'\n\nconst MB = 1024 * 1024\n\ninterface MultipartUploaderOptions<M extends Meta, B extends Body> {\n  getChunkSize?: (file: { size: number }) => number\n  onProgress?: (bytesUploaded: number, bytesTotal: number) => void\n  onPartComplete?: (part: { PartNumber: number; ETag: string }) => void\n  shouldUseMultipart?: boolean | ((file: UppyFile<M, B>) => boolean)\n  onSuccess?: (result: B) => void\n  onError?: (err: unknown) => void\n  companionComm: HTTPCommunicationQueue<M, B>\n  file: UppyFile<M, B>\n  log: Uppy<M, B>['log']\n\n  uploadId: string\n  key: string\n}\n\nconst defaultOptions = {\n  getChunkSize(file: { size: number }) {\n    return Math.ceil(file.size / 10000)\n  },\n  onProgress() {},\n  onPartComplete() {},\n  onSuccess() {},\n  onError(err: unknown) {\n    throw err\n  },\n} satisfies Partial<MultipartUploaderOptions<any, any>>\n\nexport interface Chunk {\n  getData: () => Blob\n  onProgress: (ev: ProgressEvent) => void\n  onComplete: (etag: string) => void\n  shouldUseMultipart: boolean\n  setAsUploaded?: () => void\n}\n\nfunction ensureInt<T>(value: T): T extends number | string ? number : never {\n  if (typeof value === 'string') {\n    // @ts-expect-error TS is not able to recognize it's fine.\n    return parseInt(value, 10)\n  }\n  if (typeof value === 'number') {\n    // @ts-expect-error TS is not able to recognize it's fine.\n    return value\n  }\n  throw new TypeError('Expected a number')\n}\n\nexport const pausingUploadReason = Symbol('pausing upload, not an actual error')\n\n/**\n * A MultipartUploader instance is used per file upload to determine whether a\n * upload should be done as multipart or as a regular S3 upload\n * (based on the user-provided `shouldUseMultipart` option value) and to manage\n * the chunk splitting.\n */\nclass MultipartUploader<M extends Meta, B extends Body> {\n  options: MultipartUploaderOptions<M, B> &\n    Required<Pick<MultipartUploaderOptions<M, B>, keyof typeof defaultOptions>>\n\n  #abortController = new AbortController()\n\n  #chunks: Array<Chunk | null> = []\n\n  #chunkState: { uploaded: number; etag?: string; done?: boolean }[] = []\n\n  /**\n   * The (un-chunked) data to upload.\n   */\n  #data: Blob\n\n  #file: UppyFile<M, B>\n\n  #uploadHasStarted = false\n\n  #onError: (err: unknown) => void\n\n  #onSuccess: (result: B) => void\n\n  #shouldUseMultipart: MultipartUploaderOptions<M, B>['shouldUseMultipart']\n\n  #isRestoring: boolean\n\n  #onReject = (err: unknown) =>\n    (err as any)?.cause === pausingUploadReason ? null : this.#onError(err)\n\n  #maxMultipartParts = 10_000\n\n  #minPartSize = 5 * MB\n\n  constructor(data: Blob, options: MultipartUploaderOptions<M, B>) {\n    this.options = {\n      ...defaultOptions,\n      ...options,\n    }\n    // Use default `getChunkSize` if it was null or something\n    this.options.getChunkSize ??= defaultOptions.getChunkSize\n\n    this.#data = data\n    this.#file = options.file\n    this.#onSuccess = this.options.onSuccess\n    this.#onError = this.options.onError\n    this.#shouldUseMultipart = this.options.shouldUseMultipart\n\n    // When we are restoring an upload, we already have an UploadId and a Key. Otherwise\n    // we need to call `createMultipartUpload` to get an `uploadId` and a `key`.\n    // Non-multipart uploads are not restorable.\n    this.#isRestoring = (options.uploadId && options.key) as any as boolean\n\n    this.#initChunks()\n  }\n\n  // initChunks checks the user preference for using multipart uploads (opts.shouldUseMultipart)\n  // and calculates the optimal part size. When using multipart part uploads every part except for the last has\n  // to be at least 5 MB and there can be no more than 10K parts.\n  // This means we sometimes need to change the preferred part size from the user in order to meet these requirements.\n  #initChunks() {\n    const fileSize = this.#data.size\n    const shouldUseMultipart =\n      typeof this.#shouldUseMultipart === 'function' ?\n        this.#shouldUseMultipart(this.#file)\n      : Boolean(this.#shouldUseMultipart)\n\n    if (shouldUseMultipart && fileSize > this.#minPartSize) {\n      // At least 5MB per request:\n      let chunkSize = Math.max(\n        this.options.getChunkSize(this.#data) as number, // Math.max can take undefined but TS does not think so\n        this.#minPartSize,\n      )\n      let arraySize = Math.floor(fileSize / chunkSize)\n\n      // At most 10k requests per file:\n      if (arraySize > this.#maxMultipartParts) {\n        arraySize = this.#maxMultipartParts\n        chunkSize = fileSize / this.#maxMultipartParts\n      }\n      this.#chunks = Array(arraySize)\n\n      for (let offset = 0, j = 0; offset < fileSize; offset += chunkSize, j++) {\n        const end = Math.min(fileSize, offset + chunkSize)\n\n        // Defer data fetching/slicing until we actually need the data, because it's slow if we have a lot of files\n        const getData = () => {\n          const i2 = offset\n          return this.#data.slice(i2, end)\n        }\n\n        this.#chunks[j] = {\n          getData,\n          onProgress: this.#onPartProgress(j),\n          onComplete: this.#onPartComplete(j),\n          shouldUseMultipart,\n        }\n        if (this.#isRestoring) {\n          const size =\n            offset + chunkSize > fileSize ? fileSize - offset : chunkSize\n          // setAsUploaded is called by listPart, to keep up-to-date the\n          // quantity of data that is left to actually upload.\n          this.#chunks[j]!.setAsUploaded = () => {\n            this.#chunks[j] = null\n            this.#chunkState[j].uploaded = size\n          }\n        }\n      }\n    } else {\n      this.#chunks = [\n        {\n          getData: () => this.#data,\n          onProgress: this.#onPartProgress(0),\n          onComplete: this.#onPartComplete(0),\n          shouldUseMultipart,\n        },\n      ]\n    }\n\n    this.#chunkState = this.#chunks.map(() => ({ uploaded: 0 }))\n  }\n\n  #createUpload() {\n    this.options.companionComm\n      .uploadFile(\n        this.#file,\n        this.#chunks as Chunk[],\n        this.#abortController.signal,\n      )\n      .then(this.#onSuccess, this.#onReject)\n    this.#uploadHasStarted = true\n  }\n\n  #resumeUpload() {\n    this.options.companionComm\n      .resumeUploadFile(this.#file, this.#chunks, this.#abortController.signal)\n      .then(this.#onSuccess, this.#onReject)\n  }\n\n  #onPartProgress = (index: number) => (ev: ProgressEvent) => {\n    if (!ev.lengthComputable) return\n\n    this.#chunkState[index].uploaded = ensureInt(ev.loaded)\n\n    const totalUploaded = this.#chunkState.reduce((n, c) => n + c.uploaded, 0)\n    this.options.onProgress(totalUploaded, this.#data.size)\n  }\n\n  #onPartComplete = (index: number) => (etag: string) => {\n    // This avoids the net::ERR_OUT_OF_MEMORY in Chromium Browsers.\n    this.#chunks[index] = null\n    this.#chunkState[index].etag = etag\n    this.#chunkState[index].done = true\n\n    const part = {\n      PartNumber: index + 1,\n      ETag: etag,\n    }\n    this.options.onPartComplete(part)\n  }\n\n  #abortUpload() {\n    this.#abortController.abort()\n    this.options.companionComm\n      .abortFileUpload(this.#file)\n      .catch((err: unknown) => this.options.log(err as Error))\n  }\n\n  start(): void {\n    if (this.#uploadHasStarted) {\n      if (!this.#abortController.signal.aborted)\n        this.#abortController.abort(pausingUploadReason)\n      this.#abortController = new AbortController()\n      this.#resumeUpload()\n    } else if (this.#isRestoring) {\n      this.options.companionComm.restoreUploadFile(this.#file, {\n        uploadId: this.options.uploadId,\n        key: this.options.key,\n      })\n      this.#resumeUpload()\n    } else {\n      this.#createUpload()\n    }\n  }\n\n  pause(): void {\n    this.#abortController.abort(pausingUploadReason)\n    // Swap it out for a new controller, because this instance may be resumed later.\n    this.#abortController = new AbortController()\n  }\n\n  abort(opts?: { really?: boolean }): void {\n    if (opts?.really) this.#abortUpload()\n    else this.pause()\n  }\n\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  private [Symbol.for('uppy test: getChunkState')]() {\n    return this.#chunkState\n  }\n}\n\nexport default MultipartUploader\n"],"mappings":";;;AACA,SAASA,eAAe,QAAQ,iCAAiC;AAIjE,MAAMC,EAAE,GAAG,IAAI,GAAG,IAAI;AAiBtB,MAAMC,cAAc,GAAG;EACrBC,YAAYA,CAACC,IAAsB,EAAE;IACnC,OAAOC,IAAI,CAACC,IAAI,CAACF,IAAI,CAACG,IAAI,GAAG,KAAK,CAAC;EACrC,CAAC;EACDC,UAAUA,CAAA,EAAG,CAAC,CAAC;EACfC,cAAcA,CAAA,EAAG,CAAC,CAAC;EACnBC,SAASA,CAAA,EAAG,CAAC,CAAC;EACdC,OAAOA,CAACC,GAAY,EAAE;IACpB,MAAMA,GAAG;EACX;AACF,CAAuD;AAUvD,SAASC,SAASA,CAAIC,KAAQ,EAA8C;EAC1E,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;IAC7B;IACA,OAAOC,QAAQ,CAACD,KAAK,EAAE,EAAE,CAAC;EAC5B;EACA,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;IAC7B;IACA,OAAOA,KAAK;EACd;EACA,MAAM,IAAIE,SAAS,CAAC,mBAAmB,CAAC;AAC1C;AAEA,OAAO,MAAMC,mBAAmB,GAAGC,MAAM,CAAC,qCAAqC,CAAC;;AAEhF;AACA;AACA;AACA;AACA;AACA;AALA,IAAAC,gBAAA,gBAAAC,0BAAA;AAAA,IAAAC,OAAA,gBAAAD,0BAAA;AAAA,IAAAE,WAAA,gBAAAF,0BAAA;AAAA,IAAAG,KAAA,gBAAAH,0BAAA;AAAA,IAAAI,KAAA,gBAAAJ,0BAAA;AAAA,IAAAK,iBAAA,gBAAAL,0BAAA;AAAA,IAAAM,QAAA,gBAAAN,0BAAA;AAAA,IAAAO,UAAA,gBAAAP,0BAAA;AAAA,IAAAQ,mBAAA,gBAAAR,0BAAA;AAAA,IAAAS,YAAA,gBAAAT,0BAAA;AAAA,IAAAU,SAAA,gBAAAV,0BAAA;AAAA,IAAAW,kBAAA,gBAAAX,0BAAA;AAAA,IAAAY,YAAA,gBAAAZ,0BAAA;AAAA,IAAAa,WAAA,gBAAAb,0BAAA;AAAA,IAAAc,aAAA,gBAAAd,0BAAA;AAAA,IAAAe,aAAA,gBAAAf,0BAAA;AAAA,IAAAgB,eAAA,gBAAAhB,0BAAA;AAAA,IAAAiB,eAAA,gBAAAjB,0BAAA;AAAA,IAAAkB,YAAA,gBAAAlB,0BAAA;AAMA,MAAMmB,iBAAiB,CAAiC;EAkCtDC,WAAWA,CAACC,IAAU,EAAEC,OAAuC,EAAE;IAAA,IAAAC,aAAA,EAAAC,qBAAA;IAAAC,MAAA,CAAAC,cAAA,OAAAR,YAAA;MAAAxB,KAAA,EAAAiC;IAAA;IAAAF,MAAA,CAAAC,cAAA,OAAAX,aAAA;MAAArB,KAAA,EAAAkC;IAAA;IAAAH,MAAA,CAAAC,cAAA,OAAAZ,aAAA;MAAApB,KAAA,EAAAmC;IAAA;IAsBjE;IACA;IACA;IACA;IAAAJ,MAAA,CAAAC,cAAA,OAAAb,WAAA;MAAAnB,KAAA,EAAAoC;IAAA;IAAAL,MAAA,CAAAC,cAAA,OAAA3B,gBAAA;MAAAgC,QAAA;MAAArC,KAAA,EAvDmB,IAAId,eAAe,CAAC;IAAC;IAAA6C,MAAA,CAAAC,cAAA,OAAAzB,OAAA;MAAA8B,QAAA;MAAArC,KAAA,EAET;IAAE;IAAA+B,MAAA,CAAAC,cAAA,OAAAxB,WAAA;MAAA6B,QAAA;MAAArC,KAAA,EAEoC;IAAE;IAEvE;AACF;AACA;IAFE+B,MAAA,CAAAC,cAAA,OAAAvB,KAAA;MAAA4B,QAAA;MAAArC,KAAA;IAAA;IAAA+B,MAAA,CAAAC,cAAA,OAAAtB,KAAA;MAAA2B,QAAA;MAAArC,KAAA;IAAA;IAAA+B,MAAA,CAAAC,cAAA,OAAArB,iBAAA;MAAA0B,QAAA;MAAArC,KAAA,EAOoB;IAAK;IAAA+B,MAAA,CAAAC,cAAA,OAAApB,QAAA;MAAAyB,QAAA;MAAArC,KAAA;IAAA;IAAA+B,MAAA,CAAAC,cAAA,OAAAnB,UAAA;MAAAwB,QAAA;MAAArC,KAAA;IAAA;IAAA+B,MAAA,CAAAC,cAAA,OAAAlB,mBAAA;MAAAuB,QAAA;MAAArC,KAAA;IAAA;IAAA+B,MAAA,CAAAC,cAAA,OAAAjB,YAAA;MAAAsB,QAAA;MAAArC,KAAA;IAAA;IAAA+B,MAAA,CAAAC,cAAA,OAAAhB,SAAA;MAAAqB,QAAA;MAAArC,KAAA,EAUZF,GAAY,IACvB,CAACA,GAAG,oBAAHA,GAAG,CAAUwC,KAAK,MAAKnC,mBAAmB,GAAG,IAAI,GAAAoC,2BAAA,CAAG,IAAI,EAAA3B,QAAA,EAAAA,QAAA,EAAUd,GAAG;IAAC;IAAAiC,MAAA,CAAAC,cAAA,OAAAf,kBAAA;MAAAoB,QAAA;MAAArC,KAAA,EAEpD;IAAM;IAAA+B,MAAA,CAAAC,cAAA,OAAAd,YAAA;MAAAmB,QAAA;MAAArC,KAAA,EAEZ,CAAC,GAAGb;IAAE;IAAA4C,MAAA,CAAAC,cAAA,OAAAV,eAAA;MAAAe,QAAA;MAAArC,KAAA,EA2GFwC,KAAa,IAAMC,EAAiB,IAAK;QAC1D,IAAI,CAACA,EAAE,CAACC,gBAAgB,EAAE;QAE1BH,2BAAA,KAAI,EAAA/B,WAAA,EAAAA,WAAA,EAAagC,KAAK,CAAC,CAACG,QAAQ,GAAG5C,SAAS,CAAC0C,EAAE,CAACG,MAAM,CAAC;QAEvD,MAAMC,aAAa,GAAGN,2BAAA,KAAI,EAAA/B,WAAA,EAAAA,WAAA,EAAasC,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,CAACL,QAAQ,EAAE,CAAC,CAAC;QAC1E,IAAI,CAACf,OAAO,CAAClC,UAAU,CAACmD,aAAa,EAAEN,2BAAA,KAAI,EAAA9B,KAAA,EAAAA,KAAA,EAAOhB,IAAI,CAAC;MACzD;IAAC;IAAAsC,MAAA,CAAAC,cAAA,OAAAT,eAAA;MAAAc,QAAA;MAAArC,KAAA,EAEkBwC,KAAa,IAAMS,IAAY,IAAK;QACrD;QACAV,2BAAA,KAAI,EAAAhC,OAAA,EAAAA,OAAA,EAASiC,KAAK,CAAC,GAAG,IAAI;QAC1BD,2BAAA,KAAI,EAAA/B,WAAA,EAAAA,WAAA,EAAagC,KAAK,CAAC,CAACS,IAAI,GAAGA,IAAI;QACnCV,2BAAA,KAAI,EAAA/B,WAAA,EAAAA,WAAA,EAAagC,KAAK,CAAC,CAACU,IAAI,GAAG,IAAI;QAEnC,MAAMC,IAAI,GAAG;UACXC,UAAU,EAAEZ,KAAK,GAAG,CAAC;UACrBa,IAAI,EAAEJ;QACR,CAAC;QACD,IAAI,CAACrB,OAAO,CAACjC,cAAc,CAACwD,IAAI,CAAC;MACnC;IAAC;IA5HC,IAAI,CAACvB,OAAO,GAAG;MACb,GAAGxC,cAAc;MACjB,GAAGwC;IACL,CAAC;IACD;IACA,CAAAE,qBAAA,IAAAD,aAAA,OAAI,CAACD,OAAO,EAACvC,YAAY,YAAAyC,qBAAA,GAAzBD,aAAA,CAAaxC,YAAY,GAAKD,cAAc,CAACC,YAAY;IAEzDkD,2BAAA,KAAI,EAAA9B,KAAA,EAAAA,KAAA,IAASkB,IAAI;IACjBY,2BAAA,KAAI,EAAA7B,KAAA,EAAAA,KAAA,IAASkB,OAAO,CAACtC,IAAI;IACzBiD,2BAAA,KAAI,EAAA1B,UAAA,EAAAA,UAAA,IAAc,IAAI,CAACe,OAAO,CAAChC,SAAS;IACxC2C,2BAAA,KAAI,EAAA3B,QAAA,EAAAA,QAAA,IAAY,IAAI,CAACgB,OAAO,CAAC/B,OAAO;IACpC0C,2BAAA,KAAI,EAAAzB,mBAAA,EAAAA,mBAAA,IAAuB,IAAI,CAACc,OAAO,CAAC0B,kBAAkB;;IAE1D;IACA;IACA;IACAf,2BAAA,KAAI,EAAAxB,YAAA,EAAAA,YAAA,IAAiBa,OAAO,CAAC2B,QAAQ,IAAI3B,OAAO,CAAC4B,GAAsB;IAEvEjB,2BAAA,KAAI,EAAApB,WAAA,EAAAA,WAAA;EACN;EAkHAsC,KAAKA,CAAA,EAAS;IACZ,IAAAlB,2BAAA,CAAI,IAAI,EAAA5B,iBAAA,EAAAA,iBAAA,GAAoB;MAC1B,IAAI,CAAC4B,2BAAA,KAAI,EAAAlC,gBAAA,EAAAA,gBAAA,EAAkBqD,MAAM,CAACC,OAAO,EACvCpB,2BAAA,KAAI,EAAAlC,gBAAA,EAAAA,gBAAA,EAAkBuD,KAAK,CAACzD,mBAAmB,CAAC;MAClDoC,2BAAA,KAAI,EAAAlC,gBAAA,EAAAA,gBAAA,IAAoB,IAAInB,eAAe,CAAC,CAAC;MAC7CqD,2BAAA,KAAI,EAAAlB,aAAA,EAAAA,aAAA;IACN,CAAC,MAAM,IAAAkB,2BAAA,CAAI,IAAI,EAAAxB,YAAA,EAAAA,YAAA,GAAe;MAC5B,IAAI,CAACa,OAAO,CAACiC,aAAa,CAACC,iBAAiB,CAAAvB,2BAAA,CAAC,IAAI,EAAA7B,KAAA,EAAAA,KAAA,GAAQ;QACvD6C,QAAQ,EAAE,IAAI,CAAC3B,OAAO,CAAC2B,QAAQ;QAC/BC,GAAG,EAAE,IAAI,CAAC5B,OAAO,CAAC4B;MACpB,CAAC,CAAC;MACFjB,2BAAA,KAAI,EAAAlB,aAAA,EAAAA,aAAA;IACN,CAAC,MAAM;MACLkB,2BAAA,KAAI,EAAAnB,aAAA,EAAAA,aAAA;IACN;EACF;EAEA2C,KAAKA,CAAA,EAAS;IACZxB,2BAAA,KAAI,EAAAlC,gBAAA,EAAAA,gBAAA,EAAkBuD,KAAK,CAACzD,mBAAmB,CAAC;IAChD;IACAoC,2BAAA,KAAI,EAAAlC,gBAAA,EAAAA,gBAAA,IAAoB,IAAInB,eAAe,CAAC,CAAC;EAC/C;EAEA0E,KAAKA,CAACI,IAA2B,EAAQ;IACvC,IAAIA,IAAI,YAAJA,IAAI,CAAEC,MAAM,EAAE1B,2BAAA,KAAI,EAAAf,YAAA,EAAAA,YAAA,IAAe,KAChC,IAAI,CAACuC,KAAK,CAAC,CAAC;EACnB;;EAEA;EACA,CAAS3D,MAAM,CAAC8D,GAAG,CAAC,0BAA0B,CAAC,IAAI;IACjD,OAAA3B,2BAAA,CAAO,IAAI,EAAA/B,WAAA,EAAAA,WAAA;EACb;AACF;AAAC,SAAA4B,aAAA,EA5Ie;EACZ,MAAM+B,QAAQ,GAAG5B,2BAAA,KAAI,EAAA9B,KAAA,EAAAA,KAAA,EAAOhB,IAAI;EAChC,MAAM6D,kBAAkB,GACtB,OAAAf,2BAAA,CAAO,IAAI,EAAAzB,mBAAA,EAAAA,mBAAA,CAAoB,KAAK,UAAU,GAAAyB,2BAAA,CAC5C,IAAI,EAAAzB,mBAAA,EAAAA,mBAAA,EAAAyB,2BAAA,CAAqB,IAAI,EAAA7B,KAAA,EAAAA,KAAA,KAC7B0D,OAAO,CAAA7B,2BAAA,CAAC,IAAI,EAAAzB,mBAAA,EAAAA,mBAAA,CAAoB,CAAC;EAErC,IAAIwC,kBAAkB,IAAIa,QAAQ,GAAA5B,2BAAA,CAAG,IAAI,EAAArB,YAAA,EAAAA,YAAA,CAAa,EAAE;IACtD;IACA,IAAImD,SAAS,GAAG9E,IAAI,CAAC+E,GAAG,CACtB,IAAI,CAAC1C,OAAO,CAACvC,YAAY,CAAAkD,2BAAA,CAAC,IAAI,EAAA9B,KAAA,EAAAA,KAAA,CAAM,CAAC,EAAY;IAAA8B,2BAAA,CACjD,IAAI,EAAArB,YAAA,EAAAA,YAAA,CACN,CAAC;IACD,IAAIqD,SAAS,GAAGhF,IAAI,CAACiF,KAAK,CAACL,QAAQ,GAAGE,SAAS,CAAC;;IAEhD;IACA,IAAIE,SAAS,GAAAhC,2BAAA,CAAG,IAAI,EAAAtB,kBAAA,EAAAA,kBAAA,CAAmB,EAAE;MACvCsD,SAAS,GAAAhC,2BAAA,CAAG,IAAI,EAAAtB,kBAAA,EAAAA,kBAAA,CAAmB;MACnCoD,SAAS,GAAGF,QAAQ,GAAA5B,2BAAA,CAAG,IAAI,EAAAtB,kBAAA,EAAAA,kBAAA,CAAmB;IAChD;IACAsB,2BAAA,KAAI,EAAAhC,OAAA,EAAAA,OAAA,IAAWkE,KAAK,CAACF,SAAS,CAAC;IAE/B,KAAK,IAAIG,MAAM,GAAG,CAAC,EAAEC,CAAC,GAAG,CAAC,EAAED,MAAM,GAAGP,QAAQ,EAAEO,MAAM,IAAIL,SAAS,EAAEM,CAAC,EAAE,EAAE;MACvE,MAAMC,GAAG,GAAGrF,IAAI,CAACsF,GAAG,CAACV,QAAQ,EAAEO,MAAM,GAAGL,SAAS,CAAC;;MAElD;MACA,MAAMS,OAAO,GAAGA,CAAA,KAAM;QACpB,MAAMC,EAAE,GAAGL,MAAM;QACjB,OAAOnC,2BAAA,KAAI,EAAA9B,KAAA,EAAAA,KAAA,EAAOuE,KAAK,CAACD,EAAE,EAAEH,GAAG,CAAC;MAClC,CAAC;MAEDrC,2BAAA,KAAI,EAAAhC,OAAA,EAAAA,OAAA,EAASoE,CAAC,CAAC,GAAG;QAChBG,OAAO;QACPpF,UAAU,EAAA6C,2BAAA,CAAE,IAAI,EAAAjB,eAAA,EAAAA,eAAA,EAAiBqD,CAAC,CAAC;QACnCM,UAAU,EAAA1C,2BAAA,CAAE,IAAI,EAAAhB,eAAA,EAAAA,eAAA,EAAiBoD,CAAC,CAAC;QACnCrB;MACF,CAAC;MACD,IAAAf,2BAAA,CAAI,IAAI,EAAAxB,YAAA,EAAAA,YAAA,GAAe;QACrB,MAAMtB,IAAI,GACRiF,MAAM,GAAGL,SAAS,GAAGF,QAAQ,GAAGA,QAAQ,GAAGO,MAAM,GAAGL,SAAS;QAC/D;QACA;QACA9B,2BAAA,KAAI,EAAAhC,OAAA,EAAAA,OAAA,EAASoE,CAAC,CAAC,CAAEO,aAAa,GAAG,MAAM;UACrC3C,2BAAA,KAAI,EAAAhC,OAAA,EAAAA,OAAA,EAASoE,CAAC,CAAC,GAAG,IAAI;UACtBpC,2BAAA,KAAI,EAAA/B,WAAA,EAAAA,WAAA,EAAamE,CAAC,CAAC,CAAChC,QAAQ,GAAGlD,IAAI;QACrC,CAAC;MACH;IACF;EACF,CAAC,MAAM;IACL8C,2BAAA,KAAI,EAAAhC,OAAA,EAAAA,OAAA,IAAW,CACb;MACEuE,OAAO,EAAEA,CAAA,KAAAvC,2BAAA,CAAM,IAAI,EAAA9B,KAAA,EAAAA,KAAA,CAAM;MACzBf,UAAU,EAAA6C,2BAAA,CAAE,IAAI,EAAAjB,eAAA,EAAAA,eAAA,EAAiB,CAAC,CAAC;MACnC2D,UAAU,EAAA1C,2BAAA,CAAE,IAAI,EAAAhB,eAAA,EAAAA,eAAA,EAAiB,CAAC,CAAC;MACnC+B;IACF,CAAC,CACF;EACH;EAEAf,2BAAA,KAAI,EAAA/B,WAAA,EAAAA,WAAA,IAAe+B,2BAAA,KAAI,EAAAhC,OAAA,EAAAA,OAAA,EAAS4E,GAAG,CAAC,OAAO;IAAExC,QAAQ,EAAE;EAAE,CAAC,CAAC,CAAC;AAC9D;AAAC,SAAAR,eAAA,EAEe;EACd,IAAI,CAACP,OAAO,CAACiC,aAAa,CACvBuB,UAAU,CAAA7C,2BAAA,CACT,IAAI,EAAA7B,KAAA,EAAAA,KAAA,GAAA6B,2BAAA,CACJ,IAAI,EAAAhC,OAAA,EAAAA,OAAA,GACJgC,2BAAA,KAAI,EAAAlC,gBAAA,EAAAA,gBAAA,EAAkBqD,MACxB,CAAC,CACA2B,IAAI,CAAA9C,2BAAA,CAAC,IAAI,EAAA1B,UAAA,EAAAA,UAAA,GAAA0B,2BAAA,CAAa,IAAI,EAAAvB,SAAA,EAAAA,SAAA,CAAU,CAAC;EACxCuB,2BAAA,KAAI,EAAA5B,iBAAA,EAAAA,iBAAA,IAAqB,IAAI;AAC/B;AAAC,SAAAuB,eAAA,EAEe;EACd,IAAI,CAACN,OAAO,CAACiC,aAAa,CACvByB,gBAAgB,CAAA/C,2BAAA,CAAC,IAAI,EAAA7B,KAAA,EAAAA,KAAA,GAAA6B,2BAAA,CAAQ,IAAI,EAAAhC,OAAA,EAAAA,OAAA,GAAUgC,2BAAA,KAAI,EAAAlC,gBAAA,EAAAA,gBAAA,EAAkBqD,MAAM,CAAC,CACxE2B,IAAI,CAAA9C,2BAAA,CAAC,IAAI,EAAA1B,UAAA,EAAAA,UAAA,GAAA0B,2BAAA,CAAa,IAAI,EAAAvB,SAAA,EAAAA,SAAA,CAAU,CAAC;AAC1C;AAAC,SAAAiB,cAAA,EAwBc;EACbM,2BAAA,KAAI,EAAAlC,gBAAA,EAAAA,gBAAA,EAAkBuD,KAAK,CAAC,CAAC;EAC7B,IAAI,CAAChC,OAAO,CAACiC,aAAa,CACvB0B,eAAe,CAAAhD,2BAAA,CAAC,IAAI,EAAA7B,KAAA,EAAAA,KAAA,CAAM,CAAC,CAC3B8E,KAAK,CAAE1F,GAAY,IAAK,IAAI,CAAC8B,OAAO,CAAC6D,GAAG,CAAC3F,GAAY,CAAC,CAAC;AAC5D;AAoCF,eAAe2B,iBAAiB","ignoreList":[]}