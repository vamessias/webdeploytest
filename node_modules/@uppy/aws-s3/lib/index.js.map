{"version":3,"names":["BasePlugin","RequestClient","EventManager","RateLimitedQueue","filterNonFailedFiles","filterFilesToEmitUploadStarted","createAbortError","getAllowedMetaFields","MultipartUploader","throwIfAborted","createSignedURL","HTTPCommunicationQueue","packageJson","assertServerError","res","error","Error","message","Object","assign","getExpiry","credentials","expirationDate","Expiration","timeUntilExpiry","Math","floor","Date","now","undefined","getAllowedMetadata","_ref","meta","allowedMetaFields","querify","metaFields","keys","fromEntries","filter","key","map","realKey","value","String","defaultOptions","limit","getTemporarySecurityCredentials","shouldUseMultipart","file","size","retryDelays","_companionCommunicationQueue","_classPrivateFieldLooseKey","_client","_setClient","_assertHost","_cachedTemporaryCredentials","_getTemporarySecurityCredentials","_setS3MultipartState","_getFile","_uploadLocalFile","_getCompanionClientArgs","_upload","_setCompanionHeaders","_setResumableUploadsCapability","_resetResumableCapability","AwsS3Multipart","constructor","uppy","opts","_rateLimitedQueue","uploadPartBytes","createMultipartUpload","listParts","abortMultipartUpload","completeMultipartUpload","signPart","getUploadParameters","defineProperty","_getCompanionClientArgs2","_uploadLocalFile2","_getTemporarySecurityCredentials2","_assertHost2","_setClient2","writable","_ref2","uploadId","cFile","getFile","id","setFileState","s3Multipart","fileIDs","length","files","getFilesByIds","filesFiltered","filesToEmit","emit","promises","isRemote","getQueue","requests","_classPrivateFieldLooseBase","controller","AbortController","removedHandler","removedFile","abort","on","uploadPromise","getRequestClientForFile","uploadRemoteFile","signal","wrapSyncFunction","off","priority","upload","Promise","all","_classPrivateFieldLoo","setCompanionHeaders","headers","boolean","capabilities","getState","setState","resumableUploads","type","dynamicDefaultOptions","bind","rateLimitedQueue","uploaders","create","uploaderEvents","Symbol","for","setOptions","newOptions","resetUploaderReferences","fileID","really","remove","metadata","post","filename","name","then","_ref3","oldSignal","_signal","encodeURIComponent","get","_ref4","_signal2","parts","uploadIdEnc","_ref5","ETag","PartNumber","options","data","expires","partNumber","method","fields","url","accountKey","AccessKeyId","accountSecret","SecretAccessKey","sessionToken","SessionToken","bucketName","bucket","Region","region","Key","crypto","randomUUID","_ref6","_ref7","delete","query","URLSearchParams","_ref8","signature","body","onProgress","onComplete","resolve","reject","xhr","XMLHttpRequest","open","forEach","setRequestHeader","responseType","timeout","onabort","cleanup","removeEventListener","addEventListener","ev","source","status","responseText","includes","loaded","lengthComputable","arr","getAllResponseHeaders","trim","split","headersMap","__proto__","line","header","shift","join","etag","location","toUpperCase","console","target","send","install","addPreProcessor","addUploader","uninstall","removePreProcessor","removeUploader","log","pluginId","provider","companionUrl","endpoint","companionHeaders","companionCookiesRule","cookiesRule","setTimeout","_this","bytesUploaded","bytesTotal","_latestFile$progress$","latestFile","uploadStarted","progress","onError","err","onSuccess","result","uploadResp","uploadURL","companionComm","arguments","getChunkSize","onPartComplete","part","eventManager","onFileRemove","removed","onCancelAll","onFilePause","isPaused","pause","start","onPauseAll","onResumeAll","_file$remote","remote","protocol","VERSION","version"],"sources":["index.ts"],"sourcesContent":["import BasePlugin, {\n  type DefinePluginOpts,\n  type PluginOpts,\n} from '@uppy/core/lib/BasePlugin.js'\nimport { RequestClient } from '@uppy/companion-client'\nimport type { RequestOptions } from '@uppy/utils/lib/CompanionClientProvider'\nimport type { Body, Meta, UppyFile } from '@uppy/utils/lib/UppyFile'\nimport type { Uppy } from '@uppy/core'\nimport EventManager from '@uppy/core/lib/EventManager.js'\nimport { RateLimitedQueue } from '@uppy/utils/lib/RateLimitedQueue'\nimport {\n  filterNonFailedFiles,\n  filterFilesToEmitUploadStarted,\n} from '@uppy/utils/lib/fileFilters'\nimport { createAbortError } from '@uppy/utils/lib/AbortController'\nimport getAllowedMetaFields from '@uppy/utils/lib/getAllowedMetaFields'\nimport MultipartUploader from './MultipartUploader.ts'\nimport { throwIfAborted } from './utils.ts'\nimport type {\n  UploadResult,\n  UploadResultWithSignal,\n  MultipartUploadResultWithSignal,\n  UploadPartBytesResult,\n} from './utils.ts'\nimport createSignedURL from './createSignedURL.ts'\nimport { HTTPCommunicationQueue } from './HTTPCommunicationQueue.ts'\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore We don't want TS to generate types for the package.json\nimport packageJson from '../package.json'\n\ninterface MultipartFile<M extends Meta, B extends Body> extends UppyFile<M, B> {\n  s3Multipart: UploadResult\n}\n\ntype PartUploadedCallback<M extends Meta, B extends Body> = (\n  file: UppyFile<M, B>,\n  part: { PartNumber: number; ETag: string },\n) => void\n\ndeclare module '@uppy/core' {\n  export interface UppyEventMap<M extends Meta, B extends Body> {\n    's3-multipart:part-uploaded': PartUploadedCallback<M, B>\n  }\n}\n\nfunction assertServerError<T>(res: T): T {\n  if ((res as any)?.error) {\n    const error = new Error((res as any).message)\n    Object.assign(error, (res as any).error)\n    throw error\n  }\n  return res\n}\n\nexport interface AwsS3STSResponse {\n  credentials: {\n    AccessKeyId: string\n    SecretAccessKey: string\n    SessionToken: string\n    Expiration?: string\n  }\n  bucket: string\n  region: string\n}\n\n/**\n * Computes the expiry time for a request signed with temporary credentials. If\n * no expiration was provided, or an invalid value (e.g. in the past) is\n * provided, undefined is returned. This function assumes the client clock is in\n * sync with the remote server, which is a requirement for the signature to be\n * validated for AWS anyway.\n */\nfunction getExpiry(\n  credentials: AwsS3STSResponse['credentials'],\n): number | undefined {\n  const expirationDate = credentials.Expiration\n  if (expirationDate) {\n    const timeUntilExpiry = Math.floor(\n      ((new Date(expirationDate) as any as number) - Date.now()) / 1000,\n    )\n    if (timeUntilExpiry > 9) {\n      return timeUntilExpiry\n    }\n  }\n  return undefined\n}\n\nfunction getAllowedMetadata<M extends Record<string, any>>({\n  meta,\n  allowedMetaFields,\n  querify = false,\n}: {\n  meta: M\n  allowedMetaFields?: string[] | null\n  querify?: boolean\n}) {\n  const metaFields = allowedMetaFields ?? Object.keys(meta)\n\n  if (!meta) return {}\n\n  return Object.fromEntries(\n    metaFields\n      .filter((key) => meta[key] != null)\n      .map((key) => {\n        const realKey = querify ? `metadata[${key}]` : key\n        const value = String(meta[key])\n        return [realKey, value]\n      }),\n  )\n}\n\ntype MaybePromise<T> = T | Promise<T>\n\ntype SignPartOptions = {\n  uploadId: string\n  key: string\n  partNumber: number\n  body: Blob\n  signal?: AbortSignal\n}\n\nexport type AwsS3UploadParameters =\n  | {\n      method: 'POST'\n      url: string\n      fields: Record<string, string>\n      expires?: number\n      headers?: Record<string, string>\n    }\n  | {\n      method?: 'PUT'\n      url: string\n      fields?: Record<string, never>\n      expires?: number\n      headers?: Record<string, string>\n    }\n\nexport interface AwsS3Part {\n  PartNumber?: number\n  Size?: number\n  ETag?: string\n}\n\ntype AWSS3WithCompanion = {\n  endpoint: ConstructorParameters<\n    typeof RequestClient<any, any>\n  >[1]['companionUrl']\n  headers?: ConstructorParameters<\n    typeof RequestClient<any, any>\n  >[1]['companionHeaders']\n  cookiesRule?: ConstructorParameters<\n    typeof RequestClient<any, any>\n  >[1]['companionCookiesRule']\n  getTemporarySecurityCredentials?: true\n}\ntype AWSS3WithoutCompanion = {\n  getTemporarySecurityCredentials?: (options?: {\n    signal?: AbortSignal\n  }) => MaybePromise<AwsS3STSResponse>\n  uploadPartBytes?: (options: {\n    signature: AwsS3UploadParameters\n    body: FormData | Blob\n    size?: number\n    onProgress: any\n    onComplete: any\n    signal?: AbortSignal\n  }) => Promise<UploadPartBytesResult>\n}\n\ntype AWSS3NonMultipartWithCompanionMandatory = {\n  // No related options\n}\n\ntype AWSS3NonMultipartWithoutCompanionMandatory<\n  M extends Meta,\n  B extends Body,\n> = {\n  getUploadParameters: (\n    file: UppyFile<M, B>,\n    options: RequestOptions,\n  ) => MaybePromise<AwsS3UploadParameters>\n}\ntype AWSS3NonMultipartWithCompanion = AWSS3WithCompanion &\n  AWSS3NonMultipartWithCompanionMandatory & {\n    shouldUseMultipart: false\n  }\n\ntype AWSS3NonMultipartWithoutCompanion<\n  M extends Meta,\n  B extends Body,\n> = AWSS3WithoutCompanion &\n  AWSS3NonMultipartWithoutCompanionMandatory<M, B> & {\n    shouldUseMultipart: false\n  }\n\ntype AWSS3MultipartWithoutCompanionMandatorySignPart<\n  M extends Meta,\n  B extends Body,\n> = {\n  signPart: (\n    file: UppyFile<M, B>,\n    opts: SignPartOptions,\n  ) => MaybePromise<AwsS3UploadParameters>\n}\ntype AWSS3MultipartWithoutCompanionMandatory<M extends Meta, B extends Body> = {\n  getChunkSize?: (file: { size: number }) => number\n  createMultipartUpload: (file: UppyFile<M, B>) => MaybePromise<UploadResult>\n  listParts: (\n    file: UppyFile<M, B>,\n    opts: UploadResultWithSignal,\n  ) => MaybePromise<AwsS3Part[]>\n  abortMultipartUpload: (\n    file: UppyFile<M, B>,\n    opts: UploadResultWithSignal,\n  ) => MaybePromise<void>\n  completeMultipartUpload: (\n    file: UppyFile<M, B>,\n    opts: {\n      uploadId: string\n      key: string\n      parts: AwsS3Part[]\n      signal: AbortSignal\n    },\n  ) => MaybePromise<{ location?: string }>\n} & AWSS3MultipartWithoutCompanionMandatorySignPart<M, B>\n\ntype AWSS3MultipartWithoutCompanion<\n  M extends Meta,\n  B extends Body,\n> = AWSS3WithoutCompanion &\n  AWSS3MultipartWithoutCompanionMandatory<M, B> & {\n    shouldUseMultipart?: true\n  }\n\ntype AWSS3MultipartWithCompanion<\n  M extends Meta,\n  B extends Body,\n> = AWSS3WithCompanion &\n  Partial<AWSS3MultipartWithoutCompanionMandatory<M, B>> & {\n    shouldUseMultipart?: true\n  }\n\ntype AWSS3MaybeMultipartWithCompanion<\n  M extends Meta,\n  B extends Body,\n> = AWSS3WithCompanion &\n  Partial<AWSS3MultipartWithoutCompanionMandatory<M, B>> &\n  AWSS3NonMultipartWithCompanionMandatory & {\n    shouldUseMultipart: (file: UppyFile<M, B>) => boolean\n  }\n\ntype AWSS3MaybeMultipartWithoutCompanion<\n  M extends Meta,\n  B extends Body,\n> = AWSS3WithoutCompanion &\n  AWSS3MultipartWithoutCompanionMandatory<M, B> &\n  AWSS3NonMultipartWithoutCompanionMandatory<M, B> & {\n    shouldUseMultipart: (file: UppyFile<M, B>) => boolean\n  }\n\ninterface _AwsS3MultipartOptions extends PluginOpts {\n  allowedMetaFields?: string[] | boolean\n  limit?: number\n  retryDelays?: number[] | null\n}\n\nexport type AwsS3MultipartOptions<\n  M extends Meta,\n  B extends Body,\n> = _AwsS3MultipartOptions &\n  (\n    | AWSS3NonMultipartWithCompanion\n    | AWSS3NonMultipartWithoutCompanion<M, B>\n    | AWSS3MultipartWithCompanion<M, B>\n    | AWSS3MultipartWithoutCompanion<M, B>\n    | AWSS3MaybeMultipartWithCompanion<M, B>\n    | AWSS3MaybeMultipartWithoutCompanion<M, B>\n  )\n\nexport type { AwsS3MultipartOptions as AwsS3Options }\n\nconst defaultOptions = {\n  allowedMetaFields: true,\n  limit: 6,\n  getTemporarySecurityCredentials: false as any,\n  // eslint-disable-next-line no-bitwise\n  shouldUseMultipart: ((file: UppyFile<any, any>) =>\n    // eslint-disable-next-line no-bitwise\n    (file.size! >> 10) >> 10 > 100) as any as true,\n  retryDelays: [0, 1000, 3000, 5000],\n} satisfies Partial<AwsS3MultipartOptions<any, any>>\n\nexport type { AwsBody } from './utils.ts'\n\nexport default class AwsS3Multipart<\n  M extends Meta,\n  B extends Body,\n> extends BasePlugin<\n  DefinePluginOpts<AwsS3MultipartOptions<M, B>, keyof typeof defaultOptions> &\n    // We also have a few dynamic options defined below:\n    Pick<\n      AWSS3MultipartWithoutCompanionMandatory<M, B>,\n      | 'getChunkSize'\n      | 'createMultipartUpload'\n      | 'listParts'\n      | 'abortMultipartUpload'\n      | 'completeMultipartUpload'\n    > &\n    Required<Pick<AWSS3WithoutCompanion, 'uploadPartBytes'>> &\n    Partial<AWSS3WithCompanion> &\n    AWSS3MultipartWithoutCompanionMandatorySignPart<M, B> &\n    AWSS3NonMultipartWithoutCompanionMandatory<M, B>,\n  M,\n  B\n> {\n  static VERSION = packageJson.version\n\n  #companionCommunicationQueue\n\n  #client!: RequestClient<M, B>\n\n  protected requests: any\n\n  protected uploaderEvents: Record<string, EventManager<M, B> | null>\n\n  protected uploaders: Record<string, MultipartUploader<M, B> | null>\n\n  constructor(uppy: Uppy<M, B>, opts?: AwsS3MultipartOptions<M, B>) {\n    super(uppy, {\n      ...defaultOptions,\n      uploadPartBytes: AwsS3Multipart.uploadPartBytes,\n      createMultipartUpload: null as any,\n      listParts: null as any,\n      abortMultipartUpload: null as any,\n      completeMultipartUpload: null as any,\n      signPart: null as any,\n      getUploadParameters: null as any,\n      ...opts,\n    })\n    // We need the `as any` here because of the dynamic default options.\n    this.type = 'uploader'\n    this.id = this.opts.id || 'AwsS3Multipart'\n    this.#setClient(opts)\n\n    const dynamicDefaultOptions = {\n      createMultipartUpload: this.createMultipartUpload,\n      listParts: this.listParts,\n      abortMultipartUpload: this.abortMultipartUpload,\n      completeMultipartUpload: this.completeMultipartUpload,\n      signPart:\n        opts?.getTemporarySecurityCredentials ?\n          this.createSignedURL\n        : this.signPart,\n      getUploadParameters:\n        opts?.getTemporarySecurityCredentials ?\n          (this.createSignedURL as any)\n        : this.getUploadParameters,\n    } satisfies Partial<AwsS3MultipartOptions<M, B>>\n\n    for (const key of Object.keys(dynamicDefaultOptions)) {\n      if (this.opts[key as keyof typeof dynamicDefaultOptions] == null) {\n        this.opts[key as keyof typeof dynamicDefaultOptions] =\n          dynamicDefaultOptions[key as keyof typeof dynamicDefaultOptions].bind(\n            this,\n          )\n      }\n    }\n\n    /**\n     * Simultaneous upload limiting is shared across all uploads with this plugin.\n     *\n     * @type {RateLimitedQueue}\n     */\n    this.requests =\n      (this.opts as any).rateLimitedQueue ??\n      new RateLimitedQueue(this.opts.limit)\n    this.#companionCommunicationQueue = new HTTPCommunicationQueue(\n      this.requests,\n      this.opts,\n      this.#setS3MultipartState,\n      this.#getFile,\n    )\n\n    this.uploaders = Object.create(null)\n    this.uploaderEvents = Object.create(null)\n  }\n\n  private [Symbol.for('uppy test: getClient')]() {\n    return this.#client\n  }\n\n  #setClient(opts?: Partial<AwsS3MultipartOptions<M, B>>) {\n    if (\n      opts == null ||\n      !(\n        'endpoint' in opts ||\n        'companionUrl' in opts ||\n        'headers' in opts ||\n        'companionHeaders' in opts ||\n        'cookiesRule' in opts ||\n        'companionCookiesRule' in opts\n      )\n    )\n      return\n    if ('companionUrl' in opts && !('endpoint' in opts)) {\n      this.uppy.log(\n        '`companionUrl` option has been removed in @uppy/aws-s3, use `endpoint` instead.',\n        'warning',\n      )\n    }\n    if ('companionHeaders' in opts && !('headers' in opts)) {\n      this.uppy.log(\n        '`companionHeaders` option has been removed in @uppy/aws-s3, use `headers` instead.',\n        'warning',\n      )\n    }\n    if ('companionCookiesRule' in opts && !('cookiesRule' in opts)) {\n      this.uppy.log(\n        '`companionCookiesRule` option has been removed in @uppy/aws-s3, use `cookiesRule` instead.',\n        'warning',\n      )\n    }\n    if ('endpoint' in opts) {\n      this.#client = new RequestClient(this.uppy, {\n        pluginId: this.id,\n        provider: 'AWS',\n        companionUrl: this.opts.endpoint!,\n        companionHeaders: this.opts.headers,\n        companionCookiesRule: this.opts.cookiesRule,\n      })\n    } else {\n      if ('headers' in opts) {\n        this.#setCompanionHeaders()\n      }\n      if ('cookiesRule' in opts) {\n        this.#client.opts.companionCookiesRule = opts.cookiesRule\n      }\n    }\n  }\n\n  setOptions(newOptions: Partial<AwsS3MultipartOptions<M, B>>): void {\n    this.#companionCommunicationQueue.setOptions(newOptions)\n    super.setOptions(newOptions as any)\n    this.#setClient(newOptions)\n  }\n\n  /**\n   * Clean up all references for a file's upload: the MultipartUploader instance,\n   * any events related to the file, and the Companion WebSocket connection.\n   *\n   * Set `opts.abort` to tell S3 that the multipart upload is cancelled and must be removed.\n   * This should be done when the user cancels the upload, not when the upload is completed or errored.\n   */\n  resetUploaderReferences(fileID: string, opts?: { abort: boolean }): void {\n    if (this.uploaders[fileID]) {\n      this.uploaders[fileID]!.abort({ really: opts?.abort || false })\n      this.uploaders[fileID] = null\n    }\n    if (this.uploaderEvents[fileID]) {\n      this.uploaderEvents[fileID]!.remove()\n      this.uploaderEvents[fileID] = null\n    }\n  }\n\n  #assertHost(method: string): void {\n    if (!this.#client) {\n      throw new Error(\n        `Expected a \\`endpoint\\` option containing a URL, or if you are not using Companion, a custom \\`${method}\\` implementation.`,\n      )\n    }\n  }\n\n  createMultipartUpload(\n    file: UppyFile<M, B>,\n    signal?: AbortSignal,\n  ): Promise<UploadResult> {\n    this.#assertHost('createMultipartUpload')\n    throwIfAborted(signal)\n\n    const allowedMetaFields = getAllowedMetaFields(\n      this.opts.allowedMetaFields,\n      file.meta,\n    )\n    const metadata = getAllowedMetadata({ meta: file.meta, allowedMetaFields })\n\n    return this.#client\n      .post<UploadResult>(\n        's3/multipart',\n        {\n          filename: file.name,\n          type: file.type,\n          metadata,\n        },\n        { signal },\n      )\n      .then(assertServerError)\n  }\n\n  listParts(\n    file: UppyFile<M, B>,\n    { key, uploadId, signal }: UploadResultWithSignal,\n    oldSignal?: AbortSignal,\n  ): Promise<AwsS3Part[]> {\n    signal ??= oldSignal // eslint-disable-line no-param-reassign\n    this.#assertHost('listParts')\n    throwIfAborted(signal)\n\n    const filename = encodeURIComponent(key)\n    return this.#client\n      .get<\n        AwsS3Part[]\n      >(`s3/multipart/${encodeURIComponent(uploadId)}?key=${filename}`, { signal })\n      .then(assertServerError)\n  }\n\n  completeMultipartUpload(\n    file: UppyFile<M, B>,\n    { key, uploadId, parts, signal }: MultipartUploadResultWithSignal,\n    oldSignal?: AbortSignal,\n  ): Promise<B> {\n    signal ??= oldSignal // eslint-disable-line no-param-reassign\n    this.#assertHost('completeMultipartUpload')\n    throwIfAborted(signal)\n\n    const filename = encodeURIComponent(key)\n    const uploadIdEnc = encodeURIComponent(uploadId)\n    return this.#client\n      .post<B>(\n        `s3/multipart/${uploadIdEnc}/complete?key=${filename}`,\n        { parts: parts.map(({ ETag, PartNumber }) => ({ ETag, PartNumber })) },\n        { signal },\n      )\n      .then(assertServerError)\n  }\n\n  #cachedTemporaryCredentials?: MaybePromise<AwsS3STSResponse>\n\n  async #getTemporarySecurityCredentials(options?: RequestOptions) {\n    throwIfAborted(options?.signal)\n\n    if (this.#cachedTemporaryCredentials == null) {\n      const { getTemporarySecurityCredentials } = this.opts\n      // We do not await it just yet, so concurrent calls do not try to override it:\n      if (getTemporarySecurityCredentials === true) {\n        this.#assertHost('getTemporarySecurityCredentials')\n        this.#cachedTemporaryCredentials = this.#client\n          .get<AwsS3STSResponse>('s3/sts', options)\n          .then(assertServerError)\n      } else {\n        this.#cachedTemporaryCredentials =\n          (getTemporarySecurityCredentials as AWSS3WithoutCompanion['getTemporarySecurityCredentials'])!(\n            options,\n          )\n      }\n      this.#cachedTemporaryCredentials = await this.#cachedTemporaryCredentials\n      setTimeout(\n        () => {\n          // At half the time left before expiration, we clear the cache. That's\n          // an arbitrary tradeoff to limit the number of requests made to the\n          // remote while limiting the risk of using an expired token in case the\n          // clocks are not exactly synced.\n          // The HTTP cache should be configured to ensure a client doesn't request\n          // more tokens than it needs, but this timeout provides a second layer of\n          // security in case the HTTP cache is disabled or misconfigured.\n          this.#cachedTemporaryCredentials = null as any\n        },\n        (getExpiry(this.#cachedTemporaryCredentials.credentials) || 0) * 500,\n      )\n    }\n\n    return this.#cachedTemporaryCredentials\n  }\n\n  async createSignedURL(\n    file: UppyFile<M, B>,\n    options: SignPartOptions,\n  ): Promise<AwsS3UploadParameters> {\n    const data = await this.#getTemporarySecurityCredentials(options)\n    const expires = getExpiry(data.credentials) || 604_800 // 604 800 is the max value accepted by AWS.\n\n    const { uploadId, key, partNumber } = options\n\n    // Return an object in the correct shape.\n    return {\n      method: 'PUT',\n      expires,\n      fields: {},\n      url: `${await createSignedURL({\n        accountKey: data.credentials.AccessKeyId,\n        accountSecret: data.credentials.SecretAccessKey,\n        sessionToken: data.credentials.SessionToken,\n        expires,\n        bucketName: data.bucket,\n        Region: data.region,\n        Key: key ?? `${crypto.randomUUID()}-${file.name}`,\n        uploadId,\n        partNumber,\n      })}`,\n      // Provide content type header required by S3\n      headers: {\n        'Content-Type': file.type as string,\n      },\n    }\n  }\n\n  signPart(\n    file: UppyFile<M, B>,\n    { uploadId, key, partNumber, signal }: SignPartOptions,\n  ): Promise<AwsS3UploadParameters> {\n    this.#assertHost('signPart')\n    throwIfAborted(signal)\n\n    if (uploadId == null || key == null || partNumber == null) {\n      throw new Error(\n        'Cannot sign without a key, an uploadId, and a partNumber',\n      )\n    }\n\n    const filename = encodeURIComponent(key)\n    return this.#client\n      .get<AwsS3UploadParameters>(\n        `s3/multipart/${encodeURIComponent(uploadId)}/${partNumber}?key=${filename}`,\n        { signal },\n      )\n      .then(assertServerError)\n  }\n\n  abortMultipartUpload(\n    file: UppyFile<M, B>,\n    { key, uploadId, signal }: UploadResultWithSignal,\n  ): Promise<void> {\n    this.#assertHost('abortMultipartUpload')\n\n    const filename = encodeURIComponent(key)\n    const uploadIdEnc = encodeURIComponent(uploadId)\n    return this.#client\n      .delete<void>(`s3/multipart/${uploadIdEnc}?key=${filename}`, undefined, {\n        signal,\n      })\n      .then(assertServerError)\n  }\n\n  getUploadParameters(\n    file: UppyFile<M, B>,\n    options: RequestOptions,\n  ): Promise<AwsS3UploadParameters> {\n    this.#assertHost('getUploadParameters')\n    const { meta } = file\n    const { type, name: filename } = meta\n    const allowedMetaFields = getAllowedMetaFields(\n      this.opts.allowedMetaFields,\n      file.meta,\n    )\n    const metadata = getAllowedMetadata({\n      meta,\n      allowedMetaFields,\n      querify: true,\n    })\n\n    const query = new URLSearchParams({ filename, type, ...metadata } as Record<\n      string,\n      string\n    >)\n\n    return this.#client.get(`s3/params?${query}`, options)\n  }\n\n  static async uploadPartBytes({\n    signature: { url, expires, headers, method = 'PUT' },\n    body,\n    size = (body as Blob).size,\n    onProgress,\n    onComplete,\n    signal,\n  }: {\n    signature: AwsS3UploadParameters\n    body: FormData | Blob\n    size?: number\n    onProgress: any\n    onComplete: any\n    signal?: AbortSignal\n  }): Promise<UploadPartBytesResult> {\n    throwIfAborted(signal)\n\n    if (url == null) {\n      throw new Error('Cannot upload to an undefined URL')\n    }\n\n    return new Promise((resolve, reject) => {\n      const xhr = new XMLHttpRequest()\n      xhr.open(method, url, true)\n      if (headers) {\n        Object.keys(headers).forEach((key) => {\n          xhr.setRequestHeader(key, headers[key])\n        })\n      }\n      xhr.responseType = 'text'\n      if (typeof expires === 'number') {\n        xhr.timeout = expires * 1000\n      }\n\n      function onabort() {\n        xhr.abort()\n      }\n      function cleanup() {\n        signal?.removeEventListener('abort', onabort)\n      }\n      signal?.addEventListener('abort', onabort)\n\n      xhr.upload.addEventListener('progress', (ev) => {\n        onProgress(ev)\n      })\n\n      xhr.addEventListener('abort', () => {\n        cleanup()\n\n        reject(createAbortError())\n      })\n\n      xhr.addEventListener('timeout', () => {\n        cleanup()\n\n        const error = new Error('Request has expired')\n        ;(error as any).source = { status: 403 }\n        reject(error)\n      })\n      xhr.addEventListener('load', () => {\n        cleanup()\n\n        if (\n          xhr.status === 403 &&\n          xhr.responseText.includes('<Message>Request has expired</Message>')\n        ) {\n          const error = new Error('Request has expired')\n          ;(error as any).source = xhr\n          reject(error)\n          return\n        }\n        if (xhr.status < 200 || xhr.status >= 300) {\n          const error = new Error('Non 2xx')\n          ;(error as any).source = xhr\n          reject(error)\n          return\n        }\n\n        onProgress?.({ loaded: size, lengthComputable: true })\n\n        // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/getAllResponseHeaders#examples\n        const arr = xhr\n          .getAllResponseHeaders()\n          .trim()\n          .split(/[\\r\\n]+/)\n        // @ts-expect-error null is allowed to avoid inherited properties\n        const headersMap: Record<string, string> = { __proto__: null }\n        for (const line of arr) {\n          const parts = line.split(': ')\n          const header = parts.shift()!\n          const value = parts.join(': ')\n          headersMap[header] = value\n        }\n        const { etag, location } = headersMap\n\n        // More info bucket settings when this is not present:\n        // https://github.com/transloadit/uppy/issues/5388#issuecomment-2464885562\n        if (method.toUpperCase() === 'POST' && location == null) {\n          // Not being able to read the Location header is not a fatal error.\n          // eslint-disable-next-line no-console\n          console.error(\n            '@uppy/aws-s3: Could not read the Location header. This likely means CORS is not configured correctly on the S3 Bucket. See https://uppy.io/docs/aws-s3/#setting-up-your-s3-bucket',\n          )\n        }\n        if (etag == null) {\n          // eslint-disable-next-line no-console\n          console.error(\n            '@uppy/aws-s3: Could not read the ETag header. This likely means CORS is not configured correctly on the S3 Bucket. See https://uppy.io/docs/aws-s3/#setting-up-your-s3-bucket',\n          )\n          return\n        }\n\n        onComplete?.(etag)\n        resolve({\n          ...headersMap,\n          ETag: etag, // keep capitalised ETag for backwards compatiblity\n        })\n      })\n\n      xhr.addEventListener('error', (ev) => {\n        cleanup()\n\n        const error = new Error('Unknown error')\n        ;(error as any).source = ev.target\n        reject(error)\n      })\n\n      xhr.send(body)\n    })\n  }\n\n  #setS3MultipartState = (\n    file: UppyFile<M, B>,\n    { key, uploadId }: UploadResult,\n  ) => {\n    const cFile = this.uppy.getFile(file.id)\n    if (cFile == null) {\n      // file was removed from store\n      return\n    }\n\n    this.uppy.setFileState(file.id, {\n      s3Multipart: {\n        ...(cFile as MultipartFile<M, B>).s3Multipart,\n        key,\n        uploadId,\n      },\n    } as Partial<MultipartFile<M, B>>)\n  }\n\n  #getFile = (file: UppyFile<M, B>) => {\n    return this.uppy.getFile(file.id) || file\n  }\n\n  #uploadLocalFile(file: UppyFile<M, B>) {\n    return new Promise<void | string>((resolve, reject) => {\n      const onProgress = (bytesUploaded: number, bytesTotal: number) => {\n        const latestFile = this.uppy.getFile(file.id)\n        this.uppy.emit('upload-progress', latestFile, {\n          uploadStarted: latestFile.progress.uploadStarted ?? 0,\n          bytesUploaded,\n          bytesTotal,\n        })\n      }\n\n      const onError = (err: unknown) => {\n        this.uppy.log(err as Error)\n        this.uppy.emit('upload-error', file, err as Error)\n\n        this.resetUploaderReferences(file.id)\n        reject(err)\n      }\n\n      const onSuccess = (result: B) => {\n        const uploadResp = {\n          body: {\n            ...result,\n          },\n          status: 200,\n          uploadURL: result.location as string,\n        }\n\n        this.resetUploaderReferences(file.id)\n\n        this.uppy.emit('upload-success', this.#getFile(file), uploadResp)\n\n        if (result.location) {\n          this.uppy.log(`Download ${file.name} from ${result.location}`)\n        }\n\n        resolve()\n      }\n\n      const upload = new MultipartUploader<M, B>(file.data, {\n        // .bind to pass the file object to each handler.\n        companionComm: this.#companionCommunicationQueue,\n\n        log: (...args: Parameters<Uppy<M, B>['log']>) => this.uppy.log(...args),\n        getChunkSize:\n          this.opts.getChunkSize ?\n            this.opts.getChunkSize.bind(this)\n          : undefined,\n\n        onProgress,\n        onError,\n        onSuccess,\n        onPartComplete: (part) => {\n          this.uppy.emit(\n            's3-multipart:part-uploaded',\n            this.#getFile(file),\n            part,\n          )\n        },\n\n        file,\n        shouldUseMultipart: this.opts.shouldUseMultipart,\n\n        ...(file as MultipartFile<M, B>).s3Multipart,\n      })\n\n      this.uploaders[file.id] = upload\n      const eventManager = new EventManager(this.uppy)\n      this.uploaderEvents[file.id] = eventManager\n\n      eventManager.onFileRemove(file.id, (removed) => {\n        upload.abort()\n        this.resetUploaderReferences(file.id, { abort: true })\n        resolve(`upload ${removed} was removed`)\n      })\n\n      eventManager.onCancelAll(file.id, () => {\n        upload.abort()\n        this.resetUploaderReferences(file.id, { abort: true })\n        resolve(`upload ${file.id} was canceled`)\n      })\n\n      eventManager.onFilePause(file.id, (isPaused) => {\n        if (isPaused) {\n          upload.pause()\n        } else {\n          upload.start()\n        }\n      })\n\n      eventManager.onPauseAll(file.id, () => {\n        upload.pause()\n      })\n\n      eventManager.onResumeAll(file.id, () => {\n        upload.start()\n      })\n\n      upload.start()\n    })\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  #getCompanionClientArgs(file: UppyFile<M, B>) {\n    return {\n      ...file.remote?.body,\n      protocol: 's3-multipart',\n      size: file.data.size,\n      metadata: file.meta,\n    }\n  }\n\n  #upload = async (fileIDs: string[]) => {\n    if (fileIDs.length === 0) return undefined\n\n    const files = this.uppy.getFilesByIds(fileIDs)\n    const filesFiltered = filterNonFailedFiles(files)\n    const filesToEmit = filterFilesToEmitUploadStarted(filesFiltered)\n\n    this.uppy.emit('upload-start', filesToEmit)\n\n    const promises = filesFiltered.map((file) => {\n      if (file.isRemote) {\n        const getQueue = () => this.requests\n        this.#setResumableUploadsCapability(false)\n        const controller = new AbortController()\n\n        const removedHandler = (removedFile: UppyFile<M, B>) => {\n          if (removedFile.id === file.id) controller.abort()\n        }\n        this.uppy.on('file-removed', removedHandler)\n\n        const uploadPromise = this.uppy\n          .getRequestClientForFile<RequestClient<M, B>>(file)\n          .uploadRemoteFile(file, this.#getCompanionClientArgs(file), {\n            signal: controller.signal,\n            getQueue,\n          })\n\n        this.requests.wrapSyncFunction(\n          () => {\n            this.uppy.off('file-removed', removedHandler)\n          },\n          { priority: -1 },\n        )()\n\n        return uploadPromise\n      }\n\n      return this.#uploadLocalFile(file)\n    })\n\n    const upload = await Promise.all(promises)\n    // After the upload is done, another upload may happen with only local files.\n    // We reset the capability so that the next upload can use resumable uploads.\n    this.#setResumableUploadsCapability(true)\n    return upload\n  }\n\n  #setCompanionHeaders = () => {\n    this.#client?.setCompanionHeaders(this.opts.headers!)\n  }\n\n  #setResumableUploadsCapability = (boolean: boolean) => {\n    const { capabilities } = this.uppy.getState()\n    this.uppy.setState({\n      capabilities: {\n        ...capabilities,\n        resumableUploads: boolean,\n      },\n    })\n  }\n\n  #resetResumableCapability = () => {\n    this.#setResumableUploadsCapability(true)\n  }\n\n  install(): void {\n    this.#setResumableUploadsCapability(true)\n    this.uppy.addPreProcessor(this.#setCompanionHeaders)\n    this.uppy.addUploader(this.#upload)\n    this.uppy.on('cancel-all', this.#resetResumableCapability)\n  }\n\n  uninstall(): void {\n    this.uppy.removePreProcessor(this.#setCompanionHeaders)\n    this.uppy.removeUploader(this.#upload)\n    this.uppy.off('cancel-all', this.#resetResumableCapability)\n  }\n}\n\nexport type uploadPartBytes = (typeof AwsS3Multipart<\n  any,\n  any\n>)['uploadPartBytes']\n"],"mappings":"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","ignoreList":[]}