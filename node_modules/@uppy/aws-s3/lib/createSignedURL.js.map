{"version":3,"names":["createCanonicalRequest","_ref","method","CanonicalUri","CanonicalQueryString","SignedHeaders","HashedPayload","headerKeys","Object","keys","map","k","toLowerCase","sort","join","ec","TextEncoder","algorithm","name","hash","digest","data","subtle","globalThis","crypto","encode","generateHmacKey","secret","importKey","arrayBufferToHexString","arrayBuffer","byteArray","Uint8Array","hexString","i","length","toString","padStart","key","sign","createSignedURL","_ref2","accountKey","accountSecret","sessionToken","bucketName","Key","Region","expires","uploadId","partNumber","Service","host","encodeURI","replace","c","charCodeAt","toUpperCase","payload","requestDateTime","Date","toISOString","date","slice","scope","url","URL","searchParams","set","canonical","search","hashedCanonical","stringToSign","kDate","kRegion","kService","kSigning","signature"],"sources":["createSignedURL.ts"],"sourcesContent":["/**\n * Create a canonical request by concatenating the following strings, separated\n * by newline characters. This helps ensure that the signature that you\n * calculate and the signature that AWS calculates can match.\n *\n * @see https://docs.aws.amazon.com/IAM/latest/UserGuide/create-signed-request.html#create-canonical-request\n *\n * @param param0\n * @param param0.method – The HTTP method.\n * @param param0.CanonicalUri – The URI-encoded version of the absolute\n * path component URL (everything between the host and the question mark\n * character (?) that starts the query string parameters). If the absolute path\n * is empty, use a forward slash character (/).\n * @param param0.CanonicalQueryString – The URL-encoded query string\n * parameters, separated by ampersands (&). Percent-encode reserved characters,\n * including the space character. Encode names and values separately. If there\n * are empty parameters, append the equals sign to the parameter name before\n * encoding. After encoding, sort the parameters alphabetically by key name. If\n * there is no query string, use an empty string (\"\").\n * @param param0.SignedHeaders – The request headers,\n * that will be signed, and their values, separated by newline characters.\n * For the values, trim any leading or trailing spaces, convert sequential\n * spaces to a single space, and separate the values for a multi-value header\n * using commas. You must include the host header (HTTP/1.1), and any x-amz-*\n * headers in the signature. You can optionally include other standard headers\n * in the signature, such as content-type.\n * @param param0.HashedPayload – A string created using the payload in\n * the body of the HTTP request as input to a hash function. This string uses\n * lowercase hexadecimal characters. If the payload is empty, use an empty\n * string as the input to the hash function.\n */\nfunction createCanonicalRequest({\n  method = 'PUT',\n  CanonicalUri = '/',\n  CanonicalQueryString = '',\n  SignedHeaders,\n  HashedPayload,\n}: {\n  method?: string\n  CanonicalUri: string\n  CanonicalQueryString: string\n  SignedHeaders: Record<string, string>\n  HashedPayload: string\n}): string {\n  const headerKeys = Object.keys(SignedHeaders)\n    .map((k) => k.toLowerCase())\n    .sort()\n  return [\n    method,\n    CanonicalUri,\n    CanonicalQueryString,\n    ...headerKeys.map((k) => `${k}:${SignedHeaders[k]}`),\n    '',\n    headerKeys.join(';'),\n    HashedPayload,\n  ].join('\\n')\n}\n\nconst ec = new TextEncoder()\nconst algorithm = { name: 'HMAC', hash: 'SHA-256' }\n\nasync function digest(data: string): ReturnType<SubtleCrypto['digest']> {\n  const { subtle } = globalThis.crypto\n  return subtle.digest(algorithm.hash, ec.encode(data))\n}\n\nasync function generateHmacKey(secret: string | Uint8Array | ArrayBuffer) {\n  const { subtle } = globalThis.crypto\n  return subtle.importKey(\n    'raw',\n    typeof secret === 'string' ? ec.encode(secret) : secret,\n    algorithm,\n    false,\n    ['sign'],\n  )\n}\n\nfunction arrayBufferToHexString(arrayBuffer: ArrayBuffer) {\n  const byteArray = new Uint8Array(arrayBuffer)\n  let hexString = ''\n  for (let i = 0; i < byteArray.length; i++) {\n    hexString += byteArray[i].toString(16).padStart(2, '0')\n  }\n  return hexString\n}\n\nasync function hash(key: Parameters<typeof generateHmacKey>[0], data: string) {\n  const { subtle } = globalThis.crypto\n  return subtle.sign(algorithm, await generateHmacKey(key), ec.encode(data))\n}\n\n/**\n * @see https://docs.aws.amazon.com/IAM/latest/UserGuide/create-signed-request.html\n */\nexport default async function createSignedURL({\n  accountKey,\n  accountSecret,\n  sessionToken,\n  bucketName,\n  Key,\n  Region,\n  expires,\n  uploadId,\n  partNumber,\n}: {\n  accountKey: string\n  accountSecret: string\n  sessionToken: string\n  bucketName: string\n  Key: string\n  Region: string\n  expires: string | number\n  uploadId?: string\n  partNumber?: string | number\n}): Promise<URL> {\n  const Service = 's3'\n  const host = `${Service}.${Region}.amazonaws.com`\n  /**\n   * List of char out of `encodeURI()` is taken from ECMAScript spec.\n   * Note that the `/` character is purposefully not included in list below.\n   *\n   * @see https://tc39.es/ecma262/#sec-encodeuri-uri\n   */\n  const CanonicalUri = `/${bucketName}/${encodeURI(Key).replace(/[;?:@&=+$,#!'()*]/g, (c) => `%${c.charCodeAt(0).toString(16).toUpperCase()}`)}`\n  const payload = 'UNSIGNED-PAYLOAD'\n\n  const requestDateTime = new Date().toISOString().replace(/[-:]|\\.\\d+/g, '') // YYYYMMDDTHHMMSSZ\n  const date = requestDateTime.slice(0, 8) // YYYYMMDD\n  const scope = `${date}/${Region}/${Service}/aws4_request`\n\n  const url = new URL(`https://${host}${CanonicalUri}`)\n  // N.B.: URL search params needs to be added in the ASCII order\n  url.searchParams.set('X-Amz-Algorithm', 'AWS4-HMAC-SHA256')\n  url.searchParams.set('X-Amz-Content-Sha256', payload)\n  url.searchParams.set('X-Amz-Credential', `${accountKey}/${scope}`)\n  url.searchParams.set('X-Amz-Date', requestDateTime)\n  url.searchParams.set('X-Amz-Expires', expires as string)\n  // We are signing on the client, so we expect there's going to be a session token:\n  url.searchParams.set('X-Amz-Security-Token', sessionToken)\n  url.searchParams.set('X-Amz-SignedHeaders', 'host')\n  // Those two are present only for Multipart Uploads:\n  if (partNumber) url.searchParams.set('partNumber', partNumber as string)\n  if (uploadId) url.searchParams.set('uploadId', uploadId)\n  url.searchParams.set(\n    'x-id',\n    partNumber && uploadId ? 'UploadPart' : 'PutObject',\n  )\n\n  // Step 1: Create a canonical request\n  const canonical = createCanonicalRequest({\n    CanonicalUri,\n    CanonicalQueryString: url.search.slice(1),\n    SignedHeaders: {\n      host,\n    },\n    HashedPayload: payload,\n  })\n\n  // Step 2: Create a hash of the canonical request\n  const hashedCanonical = arrayBufferToHexString(await digest(canonical))\n\n  // Step 3: Create a string to sign\n  const stringToSign = [\n    `AWS4-HMAC-SHA256`, // The algorithm used to create the hash of the canonical request.\n    requestDateTime, // The date and time used in the credential scope.\n    scope, // The credential scope. This restricts the resulting signature to the specified Region and service.\n    hashedCanonical, // The hash of the canonical request.\n  ].join('\\n')\n\n  // Step 4: Calculate the signature\n  const kDate = await hash(`AWS4${accountSecret}`, date)\n  const kRegion = await hash(kDate, Region)\n  const kService = await hash(kRegion, Service)\n  const kSigning = await hash(kService, 'aws4_request')\n  const signature = arrayBufferToHexString(await hash(kSigning, stringToSign))\n\n  // Step 5: Add the signature to the request\n  url.searchParams.set('X-Amz-Signature', signature)\n\n  return url\n}\n"],"mappings":"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","ignoreList":[]}