{"version":3,"names":["BasePlugin","EventManager","RateLimitedQueue","internalRateLimitedQueue","NetworkError","isNetworkError","fetcher","filterNonFailedFiles","filterFilesToEmitUploadStarted","getAllowedMetaFields","packageJson","locale","buildResponseError","xhr","err","error","Error","Object","assign","data","request","setTypeInBlob","file","dataWithUpdatedType","slice","size","meta","type","defaultOptions","formData","fieldName","method","allowedMetaFields","bundle","headers","timeout","limit","withCredentials","responseType","_getFetcher","_classPrivateFieldLooseKey","_uploadLocalFile","_uploadBundle","_getCompanionClientArgs","_uploadFiles","_handleUpload","XHRUpload","constructor","uppy","opts","defineProperty","value","_uploadFiles2","_getCompanionClientArgs2","_uploadBundle2","_uploadLocalFile2","writable","fileIDs","length","log","files","getFilesByIds","filesFiltered","filesToEmit","emit","isSomeFileRemote","some","isRemote","TypeError","_classPrivateFieldLooseBase","id","defaultLocale","i18nInit","requests","undefined","uploaderEvents","create","url","options","_this$opts$getRespons","_this$opts2","_body2","res","onBeforeRequest","retryCount","_this$opts$onBeforeRe","_this$opts","call","shouldRetry","onAfterResponse","onTimeout","seconds","Math","ceil","i18n","onUploadProgress","event","lengthComputable","_file$progress$upload","getFile","uploadStarted","progress","bytesUploaded","loaded","total","bytesTotal","body","getResponseData","_body","JSON","parse","responseText","cause","uploadURL","status","name","getOptions","overrides","getState","xhrUpload","addMetadata","forEach","item","Array","isArray","subItem","append","createFormDataUpload","formPost","FormData","createBundledUpload","install","capabilities","setState","individualCancellation","addUploader","uninstall","removeUploader","events","controller","AbortController","uppyFetch","wrapPromiseFunction","fetch","endpoint","signal","onFileRemove","abort","onCancelAll","abortOn","message","remove","_this$uppy$getState$x","optsFromState","once","off","_file$remote","remote","protocol","fieldname","metadata","fromEntries","map","httpMethod","useFormData","Promise","allSettled","getQueue","removedHandler","removedFile","on","uploadPromise","getRequestClientForFile","uploadRemoteFile","wrapSyncFunction","priority","VERSION","version"],"sources":["index.ts"],"sourcesContent":["import BasePlugin from '@uppy/core/lib/BasePlugin.js'\nimport type { DefinePluginOpts, PluginOpts } from '@uppy/core/lib/BasePlugin.js'\nimport type { RequestClient } from '@uppy/companion-client'\nimport EventManager from '@uppy/core/lib/EventManager.js'\nimport {\n  RateLimitedQueue,\n  internalRateLimitedQueue,\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore untyped\n} from '@uppy/utils/lib/RateLimitedQueue'\nimport NetworkError from '@uppy/utils/lib/NetworkError'\nimport isNetworkError from '@uppy/utils/lib/isNetworkError'\nimport { fetcher, type FetcherOptions } from '@uppy/utils/lib/fetcher'\nimport {\n  filterNonFailedFiles,\n  filterFilesToEmitUploadStarted,\n} from '@uppy/utils/lib/fileFilters'\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore We don't want TS to generate types for the package.json\nimport type { Meta, Body, UppyFile } from '@uppy/utils/lib/UppyFile'\nimport type { State, Uppy } from '@uppy/core'\nimport getAllowedMetaFields from '@uppy/utils/lib/getAllowedMetaFields'\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore We don't want TS to generate types for the package.json\nimport packageJson from '../package.json'\nimport locale from './locale.ts'\n\nexport interface XhrUploadOpts<M extends Meta, B extends Body>\n  extends PluginOpts {\n  endpoint: string\n  method?:\n    | 'GET'\n    | 'HEAD'\n    | 'POST'\n    | 'PUT'\n    | 'DELETE'\n    | 'OPTIONS'\n    | 'PATCH'\n    | 'delete'\n    | 'get'\n    | 'head'\n    | 'options'\n    | 'post'\n    | 'put'\n    | string\n  formData?: boolean\n  fieldName?: string\n  headers?:\n    | Record<string, string>\n    | ((file: UppyFile<M, B>) => Record<string, string>)\n  timeout?: number\n  limit?: number\n  responseType?: XMLHttpRequestResponseType\n  withCredentials?: boolean\n  onBeforeRequest?: (\n    xhr: XMLHttpRequest,\n    retryCount: number,\n    /** The files to be uploaded. When `bundle` is `false` only one file is in the array.  */\n    files: UppyFile<M, B>[],\n  ) => void | Promise<void>\n  shouldRetry?: FetcherOptions['shouldRetry']\n  onAfterResponse?: FetcherOptions['onAfterResponse']\n  getResponseData?: (xhr: XMLHttpRequest) => B | Promise<B>\n  allowedMetaFields?: boolean | string[]\n  bundle?: boolean\n}\n\nexport type { XhrUploadOpts as XHRUploadOptions }\n\ndeclare module '@uppy/utils/lib/UppyFile' {\n  // eslint-disable-next-line no-shadow\n  export interface UppyFile<M extends Meta, B extends Body> {\n    xhrUpload?: XhrUploadOpts<M, B>\n  }\n}\n\ndeclare module '@uppy/core' {\n  // eslint-disable-next-line no-shadow\n  export interface State<M extends Meta, B extends Body> {\n    xhrUpload?: XhrUploadOpts<M, B>\n  }\n}\n\nfunction buildResponseError(\n  xhr: XMLHttpRequest,\n  err?: string | Error | NetworkError,\n) {\n  let error = err\n  // No error message\n  if (!error) error = new Error('Upload error')\n  // Got an error message string\n  if (typeof error === 'string') error = new Error(error)\n  // Got something else\n  if (!(error instanceof Error)) {\n    error = Object.assign(new Error('Upload error'), { data: error })\n  }\n\n  if (isNetworkError(xhr)) {\n    error = new NetworkError(error, xhr)\n    return error\n  }\n\n  // @ts-expect-error request can only be set on NetworkError\n  // but we use NetworkError to distinguish between errors.\n  error.request = xhr\n  return error\n}\n\n/**\n * Set `data.type` in the blob to `file.meta.type`,\n * because we might have detected a more accurate file type in Uppy\n * https://stackoverflow.com/a/50875615\n */\nfunction setTypeInBlob<M extends Meta, B extends Body>(file: UppyFile<M, B>) {\n  const dataWithUpdatedType = file.data.slice(0, file.data.size, file.meta.type)\n  return dataWithUpdatedType\n}\n\nconst defaultOptions = {\n  formData: true,\n  fieldName: 'file',\n  method: 'post',\n  allowedMetaFields: true,\n  bundle: false,\n  headers: {},\n  timeout: 30 * 1000,\n  limit: 5,\n  withCredentials: false,\n  responseType: '',\n} satisfies Partial<XhrUploadOpts<any, any>>\n\ntype Opts<M extends Meta, B extends Body> = DefinePluginOpts<\n  XhrUploadOpts<M, B>,\n  keyof typeof defaultOptions\n>\n\ninterface OptsWithHeaders<M extends Meta, B extends Body> extends Opts<M, B> {\n  headers: Record<string, string>\n}\n\nexport default class XHRUpload<\n  M extends Meta,\n  B extends Body,\n> extends BasePlugin<Opts<M, B>, M, B> {\n  // eslint-disable-next-line global-require\n  static VERSION = packageJson.version\n\n  #getFetcher\n\n  requests: RateLimitedQueue\n\n  uploaderEvents: Record<string, EventManager<M, B> | null>\n\n  constructor(uppy: Uppy<M, B>, opts: XhrUploadOpts<M, B>) {\n    super(uppy, {\n      ...defaultOptions,\n      fieldName: opts.bundle ? 'files[]' : 'file',\n      ...opts,\n    })\n    this.type = 'uploader'\n    this.id = this.opts.id || 'XHRUpload'\n\n    this.defaultLocale = locale\n\n    this.i18nInit()\n\n    // Simultaneous upload limiting is shared across all uploads with this plugin.\n    if (internalRateLimitedQueue in this.opts) {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore untyped internal\n      this.requests = this.opts[internalRateLimitedQueue]\n    } else {\n      this.requests = new RateLimitedQueue(this.opts.limit)\n    }\n\n    if (this.opts.bundle && !this.opts.formData) {\n      throw new Error(\n        '`opts.formData` must be true when `opts.bundle` is enabled.',\n      )\n    }\n\n    if (this.opts.bundle && typeof this.opts.headers === 'function') {\n      throw new Error(\n        '`opts.headers` can not be a function when the `bundle: true` option is set.',\n      )\n    }\n\n    if (opts?.allowedMetaFields === undefined && 'metaFields' in this.opts) {\n      throw new Error(\n        'The `metaFields` option has been renamed to `allowedMetaFields`.',\n      )\n    }\n\n    this.uploaderEvents = Object.create(null)\n    /**\n     * xhr-upload wrapper for `fetcher` to handle user options\n     * `validateStatus`, `getResponseError`, `getResponseData`\n     * and to emit `upload-progress`, `upload-error`, and `upload-success` events.\n     */\n    this.#getFetcher = (files: UppyFile<M, B>[]) => {\n      return async (\n        url: string,\n        options: Omit<FetcherOptions, 'onBeforeRequest'> & {\n          onBeforeRequest?: Opts<M, B>['onBeforeRequest']\n        },\n      ) => {\n        try {\n          const res = await fetcher(url, {\n            ...options,\n            onBeforeRequest: (xhr, retryCount) =>\n              this.opts.onBeforeRequest?.(xhr, retryCount, files),\n            shouldRetry: this.opts.shouldRetry,\n            onAfterResponse: this.opts.onAfterResponse,\n            onTimeout: (timeout) => {\n              const seconds = Math.ceil(timeout / 1000)\n              const error = new Error(this.i18n('uploadStalled', { seconds }))\n              this.uppy.emit('upload-stalled', error, files)\n            },\n            onUploadProgress: (event) => {\n              if (event.lengthComputable) {\n                for (const { id } of files) {\n                  const file = this.uppy.getFile(id)\n                  this.uppy.emit('upload-progress', file, {\n                    uploadStarted: file.progress.uploadStarted ?? 0,\n                    bytesUploaded: (event.loaded / event.total) * file.size!,\n                    bytesTotal: file.size,\n                  })\n                }\n              }\n            },\n          })\n\n          let body = await this.opts.getResponseData?.(res)\n          try {\n            body ??= JSON.parse(res.responseText) as B\n          } catch (cause) {\n            throw new Error(\n              '@uppy/xhr-upload expects a JSON response (with a `url` property). To parse non-JSON responses, use `getResponseData` to turn your response into JSON.',\n              { cause },\n            )\n          }\n\n          const uploadURL = typeof body?.url === 'string' ? body.url : undefined\n\n          for (const { id } of files) {\n            this.uppy.emit('upload-success', this.uppy.getFile(id), {\n              status: res.status,\n              body,\n              uploadURL,\n            })\n          }\n\n          return res\n        } catch (error) {\n          if (error.name === 'AbortError') {\n            return undefined\n          }\n          if (error instanceof NetworkError) {\n            const request = error.request!\n\n            for (const file of files) {\n              this.uppy.emit(\n                'upload-error',\n                this.uppy.getFile(file.id),\n                buildResponseError(request, error),\n                request,\n              )\n            }\n          }\n\n          throw error\n        }\n      }\n    }\n  }\n\n  getOptions(file: UppyFile<M, B>): OptsWithHeaders<M, B> {\n    const overrides = this.uppy.getState().xhrUpload\n    const { headers } = this.opts\n\n    const opts = {\n      ...this.opts,\n      ...(overrides || {}),\n      ...(file.xhrUpload || {}),\n      headers: {},\n    }\n    // Support for `headers` as a function, only in the XHRUpload settings.\n    // Options set by other plugins in Uppy state or on the files themselves are still merged in afterward.\n    //\n    // ```js\n    // headers: (file) => ({ expires: file.meta.expires })\n    // ```\n    if (typeof headers === 'function') {\n      opts.headers = headers(file)\n    } else {\n      Object.assign(opts.headers, this.opts.headers)\n    }\n\n    if (overrides) {\n      Object.assign(opts.headers, overrides.headers)\n    }\n    if (file.xhrUpload) {\n      Object.assign(opts.headers, file.xhrUpload.headers)\n    }\n\n    return opts\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  addMetadata(\n    formData: FormData,\n    meta: State<M, B>['meta'],\n    opts: Opts<M, B>,\n  ): void {\n    const allowedMetaFields = getAllowedMetaFields(opts.allowedMetaFields, meta)\n\n    allowedMetaFields.forEach((item) => {\n      const value = meta[item]\n      if (Array.isArray(value)) {\n        // In this case we don't transform `item` to add brackets, it's up to\n        // the user to add the brackets so it won't be overridden.\n        value.forEach((subItem) => formData.append(item, subItem))\n      } else {\n        formData.append(item, value as string)\n      }\n    })\n  }\n\n  createFormDataUpload(file: UppyFile<M, B>, opts: Opts<M, B>): FormData {\n    const formPost = new FormData()\n\n    this.addMetadata(formPost, file.meta, opts)\n\n    const dataWithUpdatedType = setTypeInBlob(file)\n\n    if (file.name) {\n      formPost.append(opts.fieldName, dataWithUpdatedType, file.meta.name)\n    } else {\n      formPost.append(opts.fieldName, dataWithUpdatedType)\n    }\n\n    return formPost\n  }\n\n  createBundledUpload(files: UppyFile<M, B>[], opts: Opts<M, B>): FormData {\n    const formPost = new FormData()\n\n    const { meta } = this.uppy.getState()\n    this.addMetadata(formPost, meta, opts)\n\n    files.forEach((file) => {\n      const options = this.getOptions(file)\n\n      const dataWithUpdatedType = setTypeInBlob(file)\n\n      if (file.name) {\n        formPost.append(options.fieldName, dataWithUpdatedType, file.name)\n      } else {\n        formPost.append(options.fieldName, dataWithUpdatedType)\n      }\n    })\n\n    return formPost\n  }\n\n  async #uploadLocalFile(file: UppyFile<M, B>) {\n    const events = new EventManager(this.uppy)\n    const controller = new AbortController()\n    const uppyFetch = this.requests.wrapPromiseFunction(async () => {\n      const opts = this.getOptions(file)\n      const fetch = this.#getFetcher([file])\n      const body =\n        opts.formData ? this.createFormDataUpload(file, opts) : file.data\n      return fetch(opts.endpoint, {\n        ...opts,\n        body,\n        signal: controller.signal,\n      })\n    })\n\n    events.onFileRemove(file.id, () => controller.abort())\n    events.onCancelAll(file.id, () => {\n      controller.abort()\n    })\n\n    try {\n      await uppyFetch().abortOn(controller.signal)\n    } catch (error) {\n      // TODO: create formal error with name 'AbortError' (this comes from RateLimitedQueue)\n      if (error.message !== 'Cancelled') {\n        throw error\n      }\n    } finally {\n      events.remove()\n    }\n  }\n\n  async #uploadBundle(files: UppyFile<M, B>[]) {\n    const controller = new AbortController()\n    const uppyFetch = this.requests.wrapPromiseFunction(async () => {\n      const optsFromState = this.uppy.getState().xhrUpload ?? {}\n      const fetch = this.#getFetcher(files)\n      const body = this.createBundledUpload(files, {\n        ...this.opts,\n        ...optsFromState,\n      })\n      return fetch(this.opts.endpoint, {\n        // headers can't be a function with bundle: true\n        ...(this.opts as OptsWithHeaders<M, B>),\n        body,\n        signal: controller.signal,\n      })\n    })\n\n    function abort() {\n      controller.abort()\n    }\n\n    // We only need to abort on cancel all because\n    // individual cancellations are not possible with bundle: true\n    this.uppy.once('cancel-all', abort)\n\n    try {\n      await uppyFetch().abortOn(controller.signal)\n    } catch (error) {\n      // TODO: create formal error with name 'AbortError' (this comes from RateLimitedQueue)\n      if (error.message !== 'Cancelled') {\n        throw error\n      }\n    } finally {\n      this.uppy.off('cancel-all', abort)\n    }\n  }\n\n  #getCompanionClientArgs(file: UppyFile<M, B>) {\n    const opts = this.getOptions(file)\n    const allowedMetaFields = getAllowedMetaFields(\n      opts.allowedMetaFields,\n      file.meta,\n    )\n    return {\n      ...file.remote?.body,\n      protocol: 'multipart',\n      endpoint: opts.endpoint,\n      size: file.data.size,\n      fieldname: opts.fieldName,\n      metadata: Object.fromEntries(\n        allowedMetaFields.map((name) => [name, file.meta[name]]),\n      ),\n      httpMethod: opts.method,\n      useFormData: opts.formData,\n      headers: opts.headers,\n    }\n  }\n\n  async #uploadFiles(files: UppyFile<M, B>[]) {\n    await Promise.allSettled(\n      files.map((file) => {\n        if (file.isRemote) {\n          const getQueue = () => this.requests\n          const controller = new AbortController()\n\n          const removedHandler = (removedFile: UppyFile<M, B>) => {\n            if (removedFile.id === file.id) controller.abort()\n          }\n          this.uppy.on('file-removed', removedHandler)\n\n          const uploadPromise = this.uppy\n            .getRequestClientForFile<RequestClient<M, B>>(file)\n            .uploadRemoteFile(file, this.#getCompanionClientArgs(file), {\n              signal: controller.signal,\n              getQueue,\n            })\n\n          this.requests.wrapSyncFunction(\n            () => {\n              this.uppy.off('file-removed', removedHandler)\n            },\n            { priority: -1 },\n          )()\n\n          return uploadPromise\n        }\n\n        return this.#uploadLocalFile(file)\n      }),\n    )\n  }\n\n  #handleUpload = async (fileIDs: string[]) => {\n    if (fileIDs.length === 0) {\n      this.uppy.log('[XHRUpload] No files to upload!')\n      return\n    }\n\n    // No limit configured by the user, and no RateLimitedQueue passed in by a \"parent\" plugin\n    // (basically just AwsS3) using the internal symbol\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore untyped internal\n    if (this.opts.limit === 0 && !this.opts[internalRateLimitedQueue]) {\n      this.uppy.log(\n        '[XHRUpload] When uploading multiple files at once, consider setting the `limit` option (to `10` for example), to limit the number of concurrent uploads, which helps prevent memory and network issues: https://uppy.io/docs/xhr-upload/#limit-0',\n        'warning',\n      )\n    }\n\n    this.uppy.log('[XHRUpload] Uploading...')\n    const files = this.uppy.getFilesByIds(fileIDs)\n\n    const filesFiltered = filterNonFailedFiles(files)\n    const filesToEmit = filterFilesToEmitUploadStarted(filesFiltered)\n    this.uppy.emit('upload-start', filesToEmit)\n\n    if (this.opts.bundle) {\n      // if bundle: true, we don’t support remote uploads\n      const isSomeFileRemote = filesFiltered.some((file) => file.isRemote)\n      if (isSomeFileRemote) {\n        throw new Error(\n          'Can’t upload remote files when the `bundle: true` option is set',\n        )\n      }\n\n      if (typeof this.opts.headers === 'function') {\n        throw new TypeError(\n          '`headers` may not be a function when the `bundle: true` option is set',\n        )\n      }\n\n      await this.#uploadBundle(filesFiltered)\n    } else {\n      await this.#uploadFiles(filesFiltered)\n    }\n  }\n\n  install(): void {\n    if (this.opts.bundle) {\n      const { capabilities } = this.uppy.getState()\n      this.uppy.setState({\n        capabilities: {\n          ...capabilities,\n          individualCancellation: false,\n        },\n      })\n    }\n\n    this.uppy.addUploader(this.#handleUpload)\n  }\n\n  uninstall(): void {\n    if (this.opts.bundle) {\n      const { capabilities } = this.uppy.getState()\n      this.uppy.setState({\n        capabilities: {\n          ...capabilities,\n          individualCancellation: true,\n        },\n      })\n    }\n\n    this.uppy.removeUploader(this.#handleUpload)\n  }\n}\n"],"mappings":"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","ignoreList":[]}