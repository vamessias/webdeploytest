{"version":3,"names":["hasProperty","ErrorWithCause","RateLimitedQueue","BasePlugin","Tus","Assembly","Client","AssemblyWatcher","locale","packageJson","defaultOptions","service","errorReporting","waitForEncoding","waitForMetadata","alwaysRunAssembly","importFromUploadURLs","limit","retryDelays","clientName","sendErrorToConsole","originalErr","err","error","cause","console","validateParams","params","Error","JSON","parse","auth","key","COMPANION_URL","COMPANION_ALLOWED_HOSTS","TL_COMPANION","_rateLimitedQueue","_classPrivateFieldLooseKey","_watcher","_getClientVersion","_attachAssemblyMetadata","_createAssembly","_createAssemblyWatcher","_shouldWaitAfterUpload","_reserveFiles","_onFileUploadURLAvailable","_findFile","_onFileUploadComplete","_onResult","_onAssemblyFinished","_cancelAssembly","_onCancelAll","_getPersistentData","_onRestored","_connectAssembly","_prepareUpload","_afterUpload","_closeAssemblyIfExists","_onError","_onTusError","Transloadit","constructor","uppy","opts","Object","defineProperty","value","_connectAssembly2","_cancelAssembly2","_onAssemblyFinished2","_onResult2","_onFileUploadComplete2","_findFile2","_reserveFiles2","_shouldWaitAfterUpload2","_createAssemblyWatcher2","_createAssembly2","_attachAssemblyMetadata2","_getClientVersion2","writable","restored","rawFile","_file$transloadit","file","getFile","id","transloadit","assembly","status","client","addFile","catch","log","emit","_classPrivateFieldLooseBase","setData","assemblyResponse","pluginData","savedState","previousAssembly","restoreState","files","results","assembly_id","uploads","forEach","uploadedFile","state","getPluginState","keys","stepName","result","original_id","localId","push","setPluginState","restoreAssemblies","ids","updateAssembly","_this$assembly","update","fileIDs","_assemblyOptions$fiel","assemblyOptions","fields","_this$assembly2","fileID","uploadID","_this$assembly3","_this$assembly6","map","filter","assemblyID","closeSocketConnections","_this$assembly4","close","_this$assembly5","addResultData","incompleteFiles","completedFiles","mode","message","i18n","promise","undefined","_this$assembly7","submitError","_","_err$message","startsWith","_originalRequest","endpoint","originalRequest","getUnderlyingObject","responseURL","type","defaultLocale","i18nInit","rateLimitedQueue","create","install","addPreProcessor","addPostProcessor","on","use","storeFingerprintForResuming","allowedMetaFields","capabilities","getState","setState","individualCancellation","uninstall","removePreProcessor","removePostProcessor","off","getAssembly","_this$assembly8","getAssemblyFiles","getFiles","_file$transloadit2","list","VERSION","addPluginVersion","pluginName","versionName","plugin","getPlugin","join","meta","assembly_url","filename","name","fieldname","tus","tus_url","addRequestId","remote","test","companionUrl","newHost","companion_url","replace","path","url","newFile","assign","newAssembly","createAssembly","expectedFiles","length","_ref","includes","cancelAssembly","updatedFiles","wrapped","details","idOrArrayOfIds","Array","isArray","watcher","filesFromAssembly","Promise","all","reserveFile","i","uploadURL","tus_upload_url","uploadUrl","is_tus_file","size","assemblyId","entry","assembly_ssl_url","getAssemblyStatus","then","finalStatus","progress_combined","getFilesByIds","ok","connect","version"],"sources":["index.ts"],"sourcesContent":["import hasProperty from '@uppy/utils/lib/hasProperty'\nimport ErrorWithCause from '@uppy/utils/lib/ErrorWithCause'\nimport { RateLimitedQueue } from '@uppy/utils/lib/RateLimitedQueue'\nimport BasePlugin from '@uppy/core/lib/BasePlugin.js'\nimport type { DefinePluginOpts, PluginOpts } from '@uppy/core/lib/BasePlugin.js'\nimport Tus, { type TusDetailedError, type TusOpts } from '@uppy/tus'\nimport type { Body, Meta, UppyFile } from '@uppy/utils/lib/UppyFile'\nimport type { Uppy } from '@uppy/core'\nimport Assembly from './Assembly.ts'\nimport Client, { AssemblyError } from './Client.ts'\nimport AssemblyWatcher from './AssemblyWatcher.ts'\n\nimport locale from './locale.ts'\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore We don't want TS to generate types for the package.json\nimport packageJson from '../package.json'\n\nexport interface AssemblyFile {\n  id: string\n  name: string\n  basename: string\n  ext: string\n  size: number\n  mime: string\n  type: string\n  field: string\n  md5hash: string\n  is_tus_file: boolean\n  original_md5hash: string\n  original_id: string\n  original_name: string\n  original_basename: string\n  original_path: string\n  url: string\n  ssl_url: string\n  tus_upload_url: string\n  meta: Record<string, any>\n}\n\nexport interface AssemblyResult extends AssemblyFile {\n  cost: number\n  execTime: number\n  queue: string\n  queueTime: number\n  localId: string | null\n}\n\nexport interface AssemblyResponse {\n  ok: string\n  message?: string\n  assembly_id: string\n  parent_id?: string\n  account_id: string\n  template_id?: string\n  instance: string\n  assembly_url: string\n  assembly_ssl_url: string\n  uppyserver_url: string\n  companion_url: string\n  websocket_url: string\n  tus_url: string\n  bytes_received: number\n  bytes_expected: number\n  upload_duration: number\n  client_agent?: string\n  client_ip?: string\n  client_referer?: string\n  transloadit_client: string\n  start_date: string\n  upload_meta_data_extracted: boolean\n  warnings: any[]\n  is_infinite: boolean\n  has_dupe_jobs: boolean\n  execution_start: string\n  execution_duration: number\n  execution_progress?: number\n  queue_duration: number\n  jobs_queue_duration: number\n  notify_start?: any\n  notify_url?: string\n  notify_status?: any\n  notify_response_code?: any\n  notify_duration?: any\n  last_job_completed?: string\n  fields: Record<string, any>\n  running_jobs: any[]\n  bytes_usage: number\n  executing_jobs: any[]\n  started_jobs: string[]\n  parent_assembly_status: any\n  params: string\n  template?: any\n  merged_params: string\n  uploads: AssemblyFile[]\n  results: Record<string, AssemblyResult[]>\n  build_id: string\n  error?: string\n  stderr?: string\n  stdout?: string\n  reason?: string\n}\n\nexport interface AssemblyParameters {\n  auth: {\n    key: string\n    expires?: string\n  }\n  template_id?: string\n  steps?: { [step: string]: Record<string, unknown> }\n  fields?: { [name: string]: number | string }\n  notify_url?: string\n}\n\nexport interface AssemblyOptions {\n  params?: AssemblyParameters | null\n  fields?: Record<string, string | number> | string[] | null\n  signature?: string | null\n}\n\nexport type OptionsWithRestructuredFields = Omit<AssemblyOptions, 'fields'> & {\n  fields: Record<string, string | number>\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport interface TransloaditOptions<M extends Meta, B extends Body>\n  extends PluginOpts {\n  service?: string\n  errorReporting?: boolean\n  waitForEncoding?: boolean\n  waitForMetadata?: boolean\n  importFromUploadURLs?: boolean\n  alwaysRunAssembly?: boolean\n  limit?: number\n  clientName?: string | null\n  retryDelays?: number[]\n  assemblyOptions?:\n    | AssemblyOptions\n    | (() => Promise<AssemblyOptions> | AssemblyOptions)\n}\n\nconst defaultOptions = {\n  service: 'https://api2.transloadit.com',\n  errorReporting: true,\n  waitForEncoding: false,\n  waitForMetadata: false,\n  alwaysRunAssembly: false,\n  importFromUploadURLs: false,\n  limit: 20,\n  retryDelays: [7_000, 10_000, 15_000, 20_000],\n  clientName: null,\n} satisfies TransloaditOptions<any, any>\n\nexport type Opts<M extends Meta, B extends Body> = DefinePluginOpts<\n  TransloaditOptions<M, B>,\n  keyof typeof defaultOptions\n>\n\ntype TransloaditState = {\n  files: Record<\n    string,\n    { assembly: string; id: string; uploadedFile: AssemblyFile }\n  >\n  results: Array<{\n    result: AssemblyResult\n    stepName: string\n    id: string\n    assembly: string\n  }>\n}\n\n/**\n * State we want to store in Golden Retriever to be able to recover uploads.\n */\ntype PersistentState = {\n  assemblyResponse: AssemblyResponse\n}\n\ndeclare module '@uppy/core' {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  export interface UppyEventMap<M extends Meta, B extends Body> {\n    // We're also overriding the `restored` event as it is now populated with Transloadit state.\n    restored: (pluginData: Record<string, TransloaditState>) => void\n    'restore:get-data': (\n      setData: (arg: Record<string, PersistentState>) => void,\n    ) => void\n    'transloadit:assembly-created': (\n      assembly: AssemblyResponse,\n      fileIDs: string[],\n    ) => void\n    'transloadit:assembly-cancel': (assembly: AssemblyResponse) => void\n    'transloadit:import-error': (\n      assembly: AssemblyResponse,\n      fileID: string,\n      error: Error,\n    ) => void\n    'transloadit:assembly-error': (\n      assembly: AssemblyResponse,\n      error: Error,\n    ) => void\n    'transloadit:assembly-executing': (assembly: AssemblyResponse) => void\n    'transloadit:assembly-cancelled': (assembly: AssemblyResponse) => void\n    'transloadit:upload': (\n      file: AssemblyFile,\n      assembly: AssemblyResponse,\n    ) => void\n    'transloadit:result': (\n      stepName: string,\n      result: AssemblyResult,\n      assembly: AssemblyResponse,\n    ) => void\n    'transloadit:complete': (assembly: AssemblyResponse) => void\n    'transloadit:execution-progress': (details: {\n      progress_combined?: number\n    }) => void\n  }\n}\n\ndeclare module '@uppy/utils/lib/UppyFile' {\n  // eslint-disable-next-line no-shadow, @typescript-eslint/no-unused-vars\n  export interface UppyFile<M extends Meta, B extends Body> {\n    transloadit?: { assembly: string }\n    tus?: TusOpts<M, B>\n  }\n}\n\nconst sendErrorToConsole = (originalErr: Error) => (err: Error) => {\n  const error = new ErrorWithCause('Failed to send error to the client', {\n    cause: err,\n  })\n  // eslint-disable-next-line no-console\n  console.error(error, originalErr)\n}\n\nfunction validateParams(params?: AssemblyParameters | null): void {\n  if (params == null) {\n    throw new Error('Transloadit: The `params` option is required.')\n  }\n\n  if (typeof params === 'string') {\n    try {\n      // eslint-disable-next-line no-param-reassign\n      params = JSON.parse(params)\n    } catch (err) {\n      // Tell the user that this is not an Uppy bug!\n      throw new ErrorWithCause(\n        'Transloadit: The `params` option is a malformed JSON string.',\n        { cause: err },\n      )\n    }\n  }\n\n  if (!params!.auth || !params!.auth.key) {\n    throw new Error(\n      'Transloadit: The `params.auth.key` option is required. ' +\n        'You can find your Transloadit API key at https://transloadit.com/c/template-credentials',\n    )\n  }\n}\n\nconst COMPANION_URL = 'https://api2.transloadit.com/companion'\n// Regex matching acceptable postMessage() origins for authentication feedback from companion.\nconst COMPANION_ALLOWED_HOSTS = /\\.transloadit\\.com$/\n// Regex used to check if a Companion address is run by Transloadit.\nconst TL_COMPANION = /https?:\\/\\/api2(?:-\\w+)?\\.transloadit\\.com\\/companion/\n\n/**\n * Upload files to Transloadit using Tus.\n */\nexport default class Transloadit<\n  M extends Meta,\n  B extends Body,\n> extends BasePlugin<Opts<M, B>, M, B, TransloaditState> {\n  static VERSION = packageJson.version\n\n  #rateLimitedQueue: RateLimitedQueue\n\n  client: Client<M, B>\n\n  assembly?: Assembly\n\n  #watcher!: AssemblyWatcher<M, B>\n\n  completedFiles: Record<string, boolean>\n\n  restored: Promise<void> | null = null\n\n  constructor(uppy: Uppy<M, B>, opts?: TransloaditOptions<M, B>) {\n    super(uppy, { ...defaultOptions, ...opts })\n    this.type = 'uploader'\n    this.id = this.opts.id || 'Transloadit'\n\n    this.defaultLocale = locale\n\n    this.#rateLimitedQueue = new RateLimitedQueue(this.opts.limit)\n\n    this.i18nInit()\n\n    this.client = new Client({\n      service: this.opts.service,\n      client: this.#getClientVersion(),\n      errorReporting: this.opts.errorReporting,\n      rateLimitedQueue: this.#rateLimitedQueue,\n    })\n    // Contains a file IDs that have completed postprocessing before the upload\n    // they belong to has entered the postprocess stage.\n    this.completedFiles = Object.create(null)\n  }\n\n  #getClientVersion() {\n    const list = [\n      // @ts-expect-error VERSION comes from babel, TS does not understand\n      `uppy-core:${this.uppy.constructor.VERSION}`,\n      // @ts-expect-error VERSION comes from babel, TS does not understand\n      `uppy-transloadit:${this.constructor.VERSION}`,\n      `uppy-tus:${Tus.VERSION}`,\n    ]\n\n    const addPluginVersion = (pluginName: string, versionName: string) => {\n      const plugin = this.uppy.getPlugin(pluginName)\n      if (plugin) {\n        // @ts-expect-error VERSION comes from babel, TS does not understand\n        list.push(`${versionName}:${plugin.constructor.VERSION}`)\n      }\n    }\n\n    if (this.opts.importFromUploadURLs) {\n      addPluginVersion('XHRUpload', 'uppy-xhr-upload')\n      addPluginVersion('AwsS3', 'uppy-aws-s3')\n      addPluginVersion('AwsS3Multipart', 'uppy-aws-s3-multipart')\n    }\n\n    addPluginVersion('Dropbox', 'uppy-dropbox')\n    addPluginVersion('Box', 'uppy-box')\n    addPluginVersion('Facebook', 'uppy-facebook')\n    addPluginVersion('GoogleDrive', 'uppy-google-drive')\n    addPluginVersion('GooglePhotos', 'uppy-google-photos')\n    addPluginVersion('GoogleDrivePicker', 'uppy-google-drive-picker')\n    addPluginVersion('GooglePhotosPicker', 'uppy-google-photos-picker')\n    addPluginVersion('Instagram', 'uppy-instagram')\n    addPluginVersion('OneDrive', 'uppy-onedrive')\n    addPluginVersion('Zoom', 'uppy-zoom')\n    addPluginVersion('Url', 'uppy-url')\n\n    if (this.opts.clientName != null) {\n      list.push(this.opts.clientName)\n    }\n\n    return list.join(',')\n  }\n\n  /**\n   * Attach metadata to files to configure the Tus plugin to upload to Transloadit.\n   * Also use Transloadit's Companion\n   *\n   * See: https://github.com/tus/tusd/wiki/Uploading-to-Transloadit-using-tus#uploading-using-tus\n   */\n  #attachAssemblyMetadata(file: UppyFile<M, B>, status: AssemblyResponse) {\n    // Add the metadata parameters Transloadit needs.\n    const meta = {\n      ...file.meta,\n      assembly_url: status.assembly_url,\n      filename: file.name,\n      fieldname: 'file',\n    }\n    // Add Assembly-specific Tus endpoint.\n    const tus = {\n      ...file.tus,\n      endpoint: status.tus_url,\n      // Include X-Request-ID headers for better debugging.\n      addRequestId: true,\n    }\n\n    // Set Companion location. We only add this, if 'file' has the attribute\n    // remote, because this is the criteria to identify remote files.\n    // We only replace the hostname for Transloadit's companions, so that\n    // people can also self-host them while still using Transloadit for encoding.\n    let { remote } = file\n\n    if (file.remote && TL_COMPANION.test(file.remote.companionUrl)) {\n      const newHost = status.companion_url.replace(/\\/$/, '')\n      const path = file.remote.url\n        .replace(file.remote.companionUrl, '')\n        .replace(/^\\//, '')\n\n      remote = {\n        ...file.remote,\n        companionUrl: newHost,\n        url: `${newHost}/${path}`,\n      }\n    }\n\n    // Store the Assembly ID this file is in on the file under the `transloadit` key.\n    const newFile = {\n      ...file,\n      transloadit: {\n        assembly: status.assembly_id,\n      },\n    }\n    // Only configure the Tus plugin if we are uploading straight to Transloadit (the default).\n    if (!this.opts.importFromUploadURLs) {\n      Object.assign(newFile, { meta, tus, remote })\n    }\n    return newFile\n  }\n\n  async #createAssembly(\n    fileIDs: string[],\n    assemblyOptions: OptionsWithRestructuredFields,\n  ) {\n    this.uppy.log('[Transloadit] Create Assembly')\n\n    try {\n      const newAssembly = await this.client.createAssembly({\n        ...assemblyOptions,\n        expectedFiles: fileIDs.length,\n      })\n\n      const files = this.uppy\n        .getFiles()\n        .filter(({ id }) => fileIDs.includes(id))\n\n      if (files.length === 0 && fileIDs.length !== 0) {\n        // All files have been removed, cancelling.\n        await this.client.cancelAssembly(newAssembly)\n        return null\n      }\n\n      const assembly = new Assembly(newAssembly, this.#rateLimitedQueue)\n      const { status } = assembly\n      const assemblyID = status.assembly_id\n\n      const updatedFiles: Record<string, UppyFile<M, B>> = {}\n      files.forEach((file) => {\n        updatedFiles[file.id] = this.#attachAssemblyMetadata(file, status)\n      })\n\n      this.uppy.setState({\n        files: {\n          ...this.uppy.getState().files,\n          ...updatedFiles,\n        },\n      })\n\n      this.uppy.emit('transloadit:assembly-created', status, fileIDs)\n\n      this.uppy.log(`[Transloadit] Created Assembly ${assemblyID}`)\n      return assembly\n    } catch (err) {\n      // TODO: use AssemblyError?\n      const wrapped = new ErrorWithCause(\n        `${this.i18n('creatingAssemblyFailed')}: ${err.message}`,\n        { cause: err },\n      )\n      if ('details' in err) {\n        // @ts-expect-error details is not in the Error type\n        wrapped.details = err.details\n      }\n      if ('assembly' in err) {\n        // @ts-expect-error assembly is not in the Error type\n        wrapped.assembly = err.assembly\n      }\n      throw wrapped\n    }\n  }\n\n  #createAssemblyWatcher(idOrArrayOfIds: string | string[]) {\n    // AssemblyWatcher tracks completion states of all Assemblies in this upload.\n    const ids =\n      Array.isArray(idOrArrayOfIds) ? idOrArrayOfIds : [idOrArrayOfIds]\n    const watcher = new AssemblyWatcher(this.uppy, ids)\n\n    watcher.on('assembly-complete', (id: string) => {\n      const files = this.getAssemblyFiles(id)\n      files.forEach((file) => {\n        this.completedFiles[file.id] = true\n        this.uppy.emit('postprocess-complete', file)\n      })\n    })\n\n    watcher.on('assembly-error', (id: string, error: Error) => {\n      // Clear postprocessing state for all our files.\n      const filesFromAssembly = this.getAssemblyFiles(id)\n      filesFromAssembly.forEach((file) => {\n        // TODO Maybe make a postprocess-error event here?\n\n        this.uppy.emit('upload-error', file, error)\n        this.uppy.emit('postprocess-complete', file)\n      })\n\n      // Reset `tus` key in the file state, so when the upload is retried,\n      // old tus upload is not re-used — Assebmly expects a new upload, can't currently\n      // re-use the old one. See: https://github.com/transloadit/uppy/issues/4412\n      // and `onReceiveUploadUrl` in @uppy/tus\n      const files = { ...this.uppy.getState().files }\n      filesFromAssembly.forEach((file) => delete files[file.id].tus)\n      this.uppy.setState({ files })\n\n      this.uppy.emit('error', error)\n    })\n\n    this.#watcher = watcher\n  }\n\n  #shouldWaitAfterUpload() {\n    return this.opts.waitForEncoding || this.opts.waitForMetadata\n  }\n\n  /**\n   * Used when `importFromUploadURLs` is enabled: reserves all files in\n   * the Assembly.\n   */\n  #reserveFiles(assembly: Assembly, fileIDs: string[]) {\n    return Promise.all(\n      fileIDs.map((fileID) => {\n        const file = this.uppy.getFile(fileID)\n        return this.client.reserveFile(assembly.status, file)\n      }),\n    )\n  }\n\n  /**\n   * Used when `importFromUploadURLs` is enabled: adds files to the Assembly\n   * once they have been fully uploaded.\n   */\n  #onFileUploadURLAvailable = (rawFile: UppyFile<M, B> | undefined) => {\n    const file = this.uppy.getFile(rawFile!.id)\n    if (!file?.transloadit?.assembly) {\n      return\n    }\n\n    const { status } = this.assembly!\n\n    this.client.addFile(status, file).catch((err) => {\n      this.uppy.log(err)\n      this.uppy.emit('transloadit:import-error', status, file.id, err)\n    })\n  }\n\n  #findFile(uploadedFile: AssemblyFile) {\n    const files = this.uppy.getFiles()\n    for (let i = 0; i < files.length; i++) {\n      const file = files[i]\n      // Completed file upload.\n      if (file.uploadURL === uploadedFile.tus_upload_url) {\n        return file\n      }\n      // In-progress file upload.\n      if (file.tus && file.tus.uploadUrl === uploadedFile.tus_upload_url) {\n        return file\n      }\n      if (!uploadedFile.is_tus_file) {\n        // Fingers-crossed check for non-tus uploads, eg imported from S3.\n        if (\n          file.name === uploadedFile.name &&\n          file.size === uploadedFile.size\n        ) {\n          return file\n        }\n      }\n    }\n    return undefined\n  }\n\n  #onFileUploadComplete(assemblyId: string, uploadedFile: AssemblyFile) {\n    const state = this.getPluginState()\n    const file = this.#findFile(uploadedFile)\n    if (!file) {\n      this.uppy.log(\n        '[Transloadit] Couldn’t find the file, it was likely removed in the process',\n      )\n      return\n    }\n    this.setPluginState({\n      files: {\n        ...state.files,\n        [uploadedFile.id]: {\n          assembly: assemblyId,\n          id: file.id,\n          uploadedFile,\n        },\n      },\n    })\n    this.uppy.emit('transloadit:upload', uploadedFile, this.getAssembly()!)\n  }\n\n  #onResult(assemblyId: string, stepName: string, result: AssemblyResult) {\n    const state = this.getPluginState()\n    const file = state.files[result.original_id]\n    // The `file` may not exist if an import robot was used instead of a file upload.\n    result.localId = file ? file.id : null // eslint-disable-line no-param-reassign\n\n    const entry = {\n      result,\n      stepName,\n      id: result.id,\n      assembly: assemblyId,\n    }\n\n    this.setPluginState({\n      results: [...state.results, entry],\n    })\n    this.uppy.emit('transloadit:result', stepName, result, this.getAssembly()!)\n  }\n\n  /**\n   * When an Assembly has finished processing, get the final state\n   * and emit it.\n   */\n  #onAssemblyFinished(assembly: Assembly) {\n    const url = assembly.status.assembly_ssl_url\n    this.client.getAssemblyStatus(url).then((finalStatus) => {\n      // eslint-disable-next-line no-param-reassign\n      assembly.status = finalStatus\n      this.uppy.emit('transloadit:complete', finalStatus)\n    })\n  }\n\n  async #cancelAssembly(assembly: AssemblyResponse) {\n    await this.client.cancelAssembly(assembly)\n    // TODO bubble this through AssemblyWatcher so its event handlers can clean up correctly\n    this.uppy.emit('transloadit:assembly-cancelled', assembly)\n    this.assembly = undefined\n  }\n\n  /**\n   * When all files are removed, cancel in-progress Assemblies.\n   */\n  #onCancelAll = async () => {\n    if (!this.assembly) return\n    try {\n      await this.#cancelAssembly(this.assembly.status)\n    } catch (err) {\n      this.uppy.log(err)\n    }\n  }\n\n  /**\n   * Custom state serialization for the Golden Retriever plugin.\n   * It will pass this back to the `_onRestored` function.\n   */\n  #getPersistentData = (\n    setData: (arg: Record<string, PersistentState>) => void,\n  ) => {\n    if (this.assembly) {\n      setData({ [this.id]: { assemblyResponse: this.assembly.status } })\n    }\n  }\n\n  #onRestored = (pluginData: Record<string, unknown>) => {\n    const savedState = (\n      pluginData && pluginData[this.id] ?\n        pluginData[this.id]\n      : {}) as PersistentState\n    const previousAssembly = savedState.assemblyResponse\n\n    if (!previousAssembly) {\n      // Nothing to restore.\n      return\n    }\n\n    // Convert loaded Assembly statuses to a Transloadit plugin state object.\n    const restoreState = () => {\n      const files: Record<\n        string,\n        { id: string; assembly: string; uploadedFile: AssemblyFile }\n      > = {}\n      const results: {\n        result: AssemblyResult\n        stepName: string\n        id: string\n        assembly: string\n      }[] = []\n      const { assembly_id: id } = previousAssembly\n\n      previousAssembly.uploads.forEach((uploadedFile) => {\n        const file = this.#findFile(uploadedFile)\n        files[uploadedFile.id] = {\n          id: file!.id,\n          assembly: id,\n          uploadedFile,\n        }\n      })\n\n      const state = this.getPluginState()\n      Object.keys(previousAssembly.results).forEach((stepName) => {\n        for (const result of previousAssembly.results[stepName]) {\n          const file = state.files[result.original_id]\n          result.localId = file ? file.id : null\n          results.push({\n            id: result.id,\n            result,\n            stepName,\n            assembly: id,\n          })\n        }\n      })\n\n      this.assembly = new Assembly(previousAssembly, this.#rateLimitedQueue)\n      this.assembly.status = previousAssembly\n      this.setPluginState({ files, results })\n      return files\n    }\n\n    // Set up the Assembly instances and AssemblyWatchers for existing Assemblies.\n    const restoreAssemblies = (ids: string[]) => {\n      this.#createAssemblyWatcher(previousAssembly.assembly_id)\n      this.#connectAssembly(this.assembly!, ids)\n    }\n\n    // Force-update Assembly to check for missed events.\n    const updateAssembly = () => {\n      return this.assembly?.update()\n    }\n\n    // Restore all Assembly state.\n    this.restored = (async () => {\n      const files = restoreState()\n      restoreAssemblies(Object.keys(files))\n      await updateAssembly()\n      this.restored = null\n    })()\n\n    this.restored.catch((err) => {\n      this.uppy.log('Failed to restore', err)\n    })\n  }\n\n  #connectAssembly(assembly: Assembly, ids: UppyFile<M, B>['id'][]) {\n    const { status } = assembly\n    const id = status.assembly_id\n    this.assembly = assembly\n\n    assembly.on('upload', (file: AssemblyFile) => {\n      this.#onFileUploadComplete(id, file)\n    })\n    assembly.on('error', (error: AssemblyError) => {\n      error.assembly = assembly.status // eslint-disable-line no-param-reassign\n      this.uppy.emit('transloadit:assembly-error', assembly.status, error)\n    })\n\n    assembly.on('executing', () => {\n      this.uppy.emit('transloadit:assembly-executing', assembly.status)\n    })\n\n    assembly.on(\n      'execution-progress',\n      (details: { progress_combined?: number }) => {\n        this.uppy.emit('transloadit:execution-progress', details)\n\n        if (details.progress_combined != null) {\n          // TODO: Transloadit emits progress information for the entire Assembly combined\n          // (progress_combined) and for each imported/uploaded file (progress_per_original_file).\n          // Uppy's current design requires progress to be set for each file, which is then\n          // averaged to get the total progress (see calculateProcessingProgress.js).\n          // Therefore, we currently set the combined progres for every file, so that this is\n          // the same value that is displayed to the end user, although we have more accurate\n          // per-file progress as well. We cannot use this here or otherwise progress from\n          // imported files would not be counted towards the total progress because imported\n          // files are not registered with Uppy.\n          for (const file of this.uppy.getFilesByIds(ids)) {\n            this.uppy.emit('postprocess-progress', file, {\n              mode: 'determinate',\n              value: details.progress_combined / 100,\n              message: this.i18n('encoding'),\n            })\n          }\n        }\n      },\n    )\n\n    if (this.opts.waitForEncoding) {\n      assembly.on('result', (stepName: string, result: AssemblyResult) => {\n        this.#onResult(id, stepName, result)\n      })\n    }\n\n    if (this.opts.waitForEncoding) {\n      assembly.on('finished', () => {\n        this.#onAssemblyFinished(assembly)\n      })\n    } else if (this.opts.waitForMetadata) {\n      assembly.on('metadata', () => {\n        this.#onAssemblyFinished(assembly)\n      })\n    }\n\n    // No need to connect to the socket if the Assembly has completed by now.\n    // @ts-expect-error ok does not exist on Assembly?\n    if (assembly.ok === 'ASSEMBLY_COMPLETE') {\n      return assembly\n    }\n\n    assembly.connect()\n    return assembly\n  }\n\n  #prepareUpload = async (fileIDs: string[]) => {\n    const assemblyOptions = (\n      typeof this.opts.assemblyOptions === 'function' ?\n        await this.opts.assemblyOptions()\n      : this.opts.assemblyOptions) as OptionsWithRestructuredFields\n\n    assemblyOptions.fields ??= {}\n    validateParams(assemblyOptions.params)\n\n    try {\n      const assembly =\n        // this.assembly can already be defined if we recovered files with Golden Retriever (this.#onRestored)\n        this.assembly ?? (await this.#createAssembly(fileIDs, assemblyOptions))\n\n      if (assembly == null)\n        throw new Error('All files were canceled after assembly was created')\n\n      if (this.opts.importFromUploadURLs) {\n        await this.#reserveFiles(assembly, fileIDs)\n      }\n      fileIDs.forEach((fileID) => {\n        const file = this.uppy.getFile(fileID)\n        this.uppy.emit('preprocess-complete', file)\n      })\n      this.#createAssemblyWatcher(assembly.status.assembly_id)\n      this.#connectAssembly(assembly, fileIDs)\n    } catch (err) {\n      fileIDs.forEach((fileID) => {\n        const file = this.uppy.getFile(fileID)\n        // Clear preprocessing state when the Assembly could not be created,\n        // otherwise the UI gets confused about the lingering progress keys\n        this.uppy.emit('preprocess-complete', file)\n        this.uppy.emit('upload-error', file, err)\n      })\n      throw err\n    }\n  }\n\n  #afterUpload = async (fileIDs: string[], uploadID: string): Promise<void> => {\n    try {\n      // If we're still restoring state, wait for that to be done.\n      await this.restored\n\n      const files = fileIDs\n        .map((fileID) => this.uppy.getFile(fileID))\n        // Only use files without errors\n        .filter((file) => !file.error)\n\n      const assemblyID = this.assembly?.status.assembly_id\n\n      const closeSocketConnections = () => {\n        this.assembly?.close()\n      }\n\n      // If we don't have to wait for encoding metadata or results, we can close\n      // the socket immediately and finish the upload.\n      if (!this.#shouldWaitAfterUpload()) {\n        closeSocketConnections()\n        const status = this.assembly?.status\n        if (status != null) {\n          this.uppy.addResultData(uploadID, {\n            transloadit: [status],\n          })\n        }\n        return\n      }\n\n      // If no Assemblies were created for this upload, we also do not have to wait.\n      // There's also no sockets or anything to close, so just return immediately.\n      if (!assemblyID) {\n        this.uppy.addResultData(uploadID, { transloadit: [] })\n        return\n      }\n\n      const incompleteFiles = files.filter(\n        (file) => !hasProperty(this.completedFiles, file.id),\n      )\n      incompleteFiles.forEach((file) => {\n        this.uppy.emit('postprocess-progress', file, {\n          mode: 'indeterminate',\n          message: this.i18n('encoding'),\n        })\n      })\n\n      await this.#watcher.promise\n      // assembly is now done processing!\n      closeSocketConnections()\n      const status = this.assembly?.status\n      if (status != null) {\n        this.uppy.addResultData(uploadID, {\n          transloadit: [status],\n        })\n      }\n    } finally {\n      // in case allowMultipleUploadBatches is true and the user wants to upload again,\n      // we need to allow a new assembly to be created.\n      // see https://github.com/transloadit/uppy/issues/5397\n      this.assembly = undefined\n    }\n  }\n\n  #closeAssemblyIfExists = () => {\n    this.assembly?.close()\n  }\n\n  #onError = (err: { name: string; message: string; details?: string }) => {\n    this.#closeAssemblyIfExists()\n    this.assembly = undefined\n\n    this.client\n      .submitError(err)\n      // if we can't report the error that sucks\n      .catch(sendErrorToConsole(err))\n  }\n\n  #onTusError = (_: UppyFile<M, B> | undefined, err: Error) => {\n    this.#closeAssemblyIfExists()\n    if (err?.message?.startsWith('tus: ')) {\n      const endpoint = (\n        err as TusDetailedError\n      ).originalRequest?.getUnderlyingObject()?.responseURL as string\n      this.client\n        .submitError(err, { endpoint })\n        // if we can't report the error that sucks\n        .catch(sendErrorToConsole(err))\n    }\n  }\n\n  install(): void {\n    this.uppy.addPreProcessor(this.#prepareUpload)\n    this.uppy.addPostProcessor(this.#afterUpload)\n\n    // We may need to close socket.io connections on error.\n    this.uppy.on('error', this.#onError)\n\n    // Handle cancellation.\n    this.uppy.on('cancel-all', this.#onCancelAll)\n\n    this.uppy.on('upload-error', this.#onTusError)\n\n    if (this.opts.importFromUploadURLs) {\n      // No uploader needed when importing; instead we take the upload URL from an existing uploader.\n      this.uppy.on('upload-success', this.#onFileUploadURLAvailable)\n    } else {\n      // we don't need it here.\n      // the regional endpoint from the Transloadit API before we can set it.\n      this.uppy.use(Tus, {\n        // Disable tus-js-client fingerprinting, otherwise uploading the same file at different times\n        // will upload to an outdated Assembly, and we won't get socket events for it.\n        //\n        // To resume a Transloadit upload, we need to reconnect to the websocket, and the state that's\n        // required to do that is not saved by tus-js-client's fingerprinting. We need the tus URL,\n        // the Assembly URL, and the WebSocket URL, at least. We also need to know _all_ the files that\n        // were added to the Assembly, so we can properly complete it. All that state is handled by\n        // Golden Retriever. So, Golden Retriever is required to do resumability with the Transloadit plugin,\n        // and we disable Tus's default resume implementation to prevent bad behaviours.\n        storeFingerprintForResuming: false,\n        // Send all metadata to Transloadit. Metadata set by the user\n        // ends up as in the template as `file.user_meta`\n        allowedMetaFields: true,\n        // Pass the limit option to @uppy/tus\n        limit: this.opts.limit,\n        rateLimitedQueue: this.#rateLimitedQueue,\n        retryDelays: this.opts.retryDelays,\n      })\n    }\n\n    this.uppy.on('restore:get-data', this.#getPersistentData)\n    this.uppy.on('restored', this.#onRestored)\n\n    this.setPluginState({\n      // Contains file data from Transloadit, indexed by their Transloadit-assigned ID.\n      files: {},\n      // Contains result data from Transloadit.\n      results: [],\n    })\n\n    // We cannot cancel individual files because Assemblies tend to contain many files.\n    const { capabilities } = this.uppy.getState()\n    this.uppy.setState({\n      capabilities: {\n        ...capabilities,\n        individualCancellation: false,\n      },\n    })\n  }\n\n  uninstall(): void {\n    this.uppy.removePreProcessor(this.#prepareUpload)\n    this.uppy.removePostProcessor(this.#afterUpload)\n    this.uppy.off('error', this.#onError)\n\n    if (this.opts.importFromUploadURLs) {\n      this.uppy.off('upload-success', this.#onFileUploadURLAvailable)\n    }\n\n    const { capabilities } = this.uppy.getState()\n    this.uppy.setState({\n      capabilities: {\n        ...capabilities,\n        individualCancellation: true,\n      },\n    })\n  }\n\n  getAssembly(): AssemblyResponse | undefined {\n    return this.assembly?.status\n  }\n\n  getAssemblyFiles(assemblyID: string): UppyFile<M, B>[] {\n    return this.uppy.getFiles().filter((file) => {\n      return file?.transloadit?.assembly === assemblyID\n    })\n  }\n}\n\nexport { COMPANION_URL, COMPANION_ALLOWED_HOSTS }\n"],"mappings":"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","ignoreList":[]}