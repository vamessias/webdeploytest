{"version":3,"names":["fetchWithNetworkError","ASSEMBLIES_ENDPOINT","AssemblyError","Error","constructor","message","details","assembly","_headers","_classPrivateFieldLooseKey","_fetchWithNetworkError","_fetchJSON","_reportError","Client","opts","Object","defineProperty","value","_fetchJSON2","writable","err","params","errorReporting","type","assembly_id","instance","url","endpoint","submitError","catch","client","_classPrivateFieldLooseBase","rateLimitedQueue","wrapPromiseFunction","createAssembly","_ref","fields","signature","expectedFiles","data","FormData","append","JSON","stringify","keys","forEach","key","String","URL","service","href","method","headers","body","reserveFile","file","size","encodeURIComponent","assembly_ssl_url","addFile","_file$name","uploadURL","Promise","reject","uploadUrl","filename","name","fieldname","qs","cancelAssembly","getAssemblyStatus","_temp","agent","navigator","userAgent","error","response","arguments","status","rateLimit","ok","serverError","statusText","statusCode","length","undefined","endsWith","json","then","cause"],"sources":["Client.ts"],"sourcesContent":["import type {\n  RateLimitedQueue,\n  WrapPromiseFunctionType,\n} from '@uppy/utils/lib/RateLimitedQueue'\nimport type { Body, Meta, UppyFile } from '@uppy/utils/lib/UppyFile'\nimport fetchWithNetworkError from '@uppy/utils/lib/fetchWithNetworkError'\nimport type {\n  AssemblyResponse,\n  OptionsWithRestructuredFields,\n} from './index.ts'\n\nconst ASSEMBLIES_ENDPOINT = '/assemblies'\n\ntype Opts = {\n  client?: string\n  service: string\n  rateLimitedQueue: RateLimitedQueue\n  errorReporting: boolean\n}\n\nexport class AssemblyError extends Error {\n  details: string | undefined\n\n  assembly: AssemblyResponse\n\n  constructor(\n    message: string,\n    details: string | undefined,\n    assembly: AssemblyResponse,\n  ) {\n    super(message)\n    this.details = details\n    this.assembly = assembly\n  }\n}\n\n/**\n * A Barebones HTTP API client for Transloadit.\n */\nexport default class Client<M extends Meta, B extends Body> {\n  #headers: Record<string, string> = {}\n\n  #fetchWithNetworkError: WrapPromiseFunctionType<typeof fetchWithNetworkError>\n\n  opts: Opts\n\n  constructor(opts: Opts) {\n    this.opts = opts\n\n    if (this.opts.client != null) {\n      this.#headers['Transloadit-Client'] = this.opts.client\n    }\n\n    this.#fetchWithNetworkError =\n      this.opts.rateLimitedQueue.wrapPromiseFunction(fetchWithNetworkError)\n  }\n\n  async #fetchJSON(\n    ...args: Parameters<typeof fetchWithNetworkError>\n  ): Promise<AssemblyResponse> {\n    const response = await this.#fetchWithNetworkError(...args)\n\n    if (response.status === 429) {\n      this.opts.rateLimitedQueue.rateLimit(2_000)\n      return this.#fetchJSON(...args)\n    }\n\n    if (!response.ok) {\n      const serverError = new Error(response.statusText)\n      // @ts-expect-error statusCode is not a standard property\n      serverError.statusCode = response.status\n\n      if (!`${args[0]}`.endsWith(ASSEMBLIES_ENDPOINT))\n        return Promise.reject(serverError)\n\n      // Failed assembly requests should return a more detailed error in JSON.\n      return response.json().then(\n        (assembly: AssemblyResponse) => {\n          if (!assembly.error) throw serverError\n\n          const error = new AssemblyError(\n            assembly.error,\n            assembly.message,\n            assembly,\n          )\n\n          if (assembly.assembly_id) {\n            error.details += ` Assembly ID: ${assembly.assembly_id}`\n          }\n          throw error\n        },\n        (err) => {\n          // eslint-disable-next-line no-param-reassign\n          err.cause = serverError\n          throw err\n        },\n      )\n    }\n\n    return response.json()\n  }\n\n  async createAssembly({\n    params,\n    fields,\n    signature,\n    expectedFiles,\n  }: OptionsWithRestructuredFields & {\n    expectedFiles: number\n  }): Promise<AssemblyResponse> {\n    const data = new FormData()\n    data.append(\n      'params',\n      typeof params === 'string' ? params : JSON.stringify(params),\n    )\n    if (signature) {\n      data.append('signature', signature)\n    }\n\n    Object.keys(fields).forEach((key) => {\n      data.append(key, String(fields[key]))\n    })\n    data.append('num_expected_upload_files', String(expectedFiles))\n\n    const url = new URL(ASSEMBLIES_ENDPOINT, `${this.opts.service}`).href\n    return this.#fetchJSON(url, {\n      method: 'POST',\n      headers: this.#headers,\n      body: data,\n    }).catch((err) => this.#reportError(err, { url, type: 'API_ERROR' }))\n  }\n\n  /**\n   * Reserve resources for a file in an Assembly. Then addFile can be used later.\n   */\n  async reserveFile(\n    assembly: AssemblyResponse,\n    file: UppyFile<M, B>,\n  ): Promise<AssemblyResponse> {\n    const size = encodeURIComponent(file.size!)\n    const url = `${assembly.assembly_ssl_url}/reserve_file?size=${size}`\n    return this.#fetchJSON(url, {\n      method: 'POST',\n      headers: this.#headers,\n    }).catch((err) =>\n      this.#reportError(err, { assembly, file, url, type: 'API_ERROR' }),\n    )\n  }\n\n  /**\n   * Import a remote file to an Assembly.\n   */\n  async addFile(\n    assembly: AssemblyResponse,\n    file: UppyFile<M, B>,\n  ): Promise<AssemblyResponse> {\n    if (!file.uploadURL) {\n      return Promise.reject(new Error('File does not have an `uploadURL`.'))\n    }\n    const size = encodeURIComponent(file.size!)\n    const uploadUrl = encodeURIComponent(file.uploadURL)\n    const filename = encodeURIComponent(file.name ?? 'Unnamed')\n    const fieldname = 'file'\n\n    const qs = `size=${size}&filename=${filename}&fieldname=${fieldname}&s3Url=${uploadUrl}`\n    const url = `${assembly.assembly_ssl_url}/add_file?${qs}`\n    return this.#fetchJSON(url, {\n      method: 'POST',\n      headers: this.#headers,\n    }).catch((err) =>\n      this.#reportError(err, { assembly, file, url, type: 'API_ERROR' }),\n    )\n  }\n\n  /**\n   * Cancel a running Assembly.\n   */\n  async cancelAssembly(assembly: AssemblyResponse): Promise<void> {\n    const url = assembly.assembly_ssl_url\n    await this.#fetchWithNetworkError(url, {\n      method: 'DELETE',\n      headers: this.#headers,\n    }).catch((err) => this.#reportError(err, { url, type: 'API_ERROR' }))\n  }\n\n  /**\n   * Get the current status for an assembly.\n   */\n  async getAssemblyStatus(url: string): Promise<AssemblyResponse> {\n    return this.#fetchJSON(url, { headers: this.#headers }).catch((err) =>\n      this.#reportError(err, { url, type: 'STATUS_ERROR' }),\n    )\n  }\n\n  async submitError(\n    err: { message?: string; details?: string },\n    {\n      endpoint,\n      instance,\n      assembly,\n    }: {\n      endpoint?: string | URL\n      instance?: string\n      assembly?: string\n    } = {},\n  ): Promise<AssemblyResponse> {\n    const message =\n      err.details ? `${err.message} (${err.details})` : err.message\n\n    return this.#fetchJSON('https://transloaditstatus.com/client_error', {\n      method: 'POST',\n      body: JSON.stringify({\n        endpoint,\n        instance,\n        assembly_id: assembly,\n        agent: typeof navigator !== 'undefined' ? navigator.userAgent : '',\n        client: this.opts.client,\n        error: message,\n      }),\n    })\n  }\n\n  #reportError = (\n    err: AssemblyError,\n    params: {\n      assembly?: AssemblyResponse\n      url?: URL | string\n      file?: UppyFile<M, B>\n      type: string\n    },\n  ) => {\n    if (this.opts.errorReporting === false) {\n      throw err\n    }\n\n    const opts: {\n      type: string\n      assembly?: string\n      instance?: string\n      endpoint?: URL | string\n    } = {\n      type: params.type,\n    }\n    if (params.assembly) {\n      opts.assembly = params.assembly.assembly_id\n      opts.instance = params.assembly.instance\n    }\n    if (params.url) {\n      opts.endpoint = params.url\n    }\n\n    this.submitError(err, opts).catch(() => {\n      // not much we can do then is there\n    })\n\n    throw err\n  }\n}\n"],"mappings":"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","ignoreList":[]}