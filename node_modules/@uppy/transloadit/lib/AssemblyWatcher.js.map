{"version":3,"names":["Emitter","_assemblyIDs","_classPrivateFieldLooseKey","_remaining","_resolve","_reject","_uppy","_watching","_onAssemblyComplete","_onAssemblyCancel","_onAssemblyError","_onImportError","_checkAllComplete","_removeListeners","_addListeners","TransloaditAssemblyWatcher","constructor","uppy","assemblyIDs","Object","defineProperty","value","_addListeners2","_removeListeners2","_checkAllComplete2","_watching2","writable","assembly","_classPrivateFieldLooseBase","assembly_id","log","emit","error","fileID","length","promise","Promise","resolve","reject","id","indexOf","off","on"],"sources":["AssemblyWatcher.ts"],"sourcesContent":["import type { Uppy } from '@uppy/core'\nimport type { Body, Meta } from '@uppy/utils/lib/UppyFile'\nimport Emitter from 'component-emitter'\nimport type { AssemblyResponse } from './index.ts'\n\n/**\n * Track completion of multiple assemblies.\n *\n * Emits 'assembly-complete' when an assembly completes.\n * Emits 'assembly-error' when an assembly fails.\n * Exposes a `.promise` property that resolves when all assemblies have\n * completed (or failed).\n */\nclass TransloaditAssemblyWatcher<\n  M extends Meta,\n  B extends Body,\n> extends Emitter {\n  #assemblyIDs\n\n  #remaining: number\n\n  promise: Promise<void>\n\n  #resolve!: () => void\n\n  #reject!: (reason?: string) => void\n\n  #uppy\n\n  constructor(uppy: Uppy<M, B>, assemblyIDs: string[]) {\n    super()\n\n    this.#uppy = uppy\n    this.#assemblyIDs = assemblyIDs\n    this.#remaining = assemblyIDs.length\n\n    this.promise = new Promise<void>((resolve, reject) => {\n      this.#resolve = resolve\n      this.#reject = reject\n    })\n\n    this.#addListeners()\n  }\n\n  /**\n   * Are we watching this assembly ID?\n   */\n  #watching(id: string) {\n    return this.#assemblyIDs.indexOf(id) !== -1\n  }\n\n  #onAssemblyComplete = (assembly: AssemblyResponse) => {\n    if (!this.#watching(assembly.assembly_id)) {\n      return\n    }\n\n    this.#uppy.log(\n      `[Transloadit] AssemblyWatcher: Got Assembly finish ${assembly.assembly_id}`,\n    )\n\n    this.emit('assembly-complete', assembly.assembly_id)\n\n    this.#checkAllComplete()\n  }\n\n  #onAssemblyCancel = (assembly: AssemblyResponse) => {\n    if (!this.#watching(assembly.assembly_id)) {\n      return\n    }\n\n    this.#checkAllComplete()\n  }\n\n  #onAssemblyError = (assembly: AssemblyResponse, error: Error) => {\n    if (!this.#watching(assembly.assembly_id)) {\n      return\n    }\n\n    this.#uppy.log(\n      `[Transloadit] AssemblyWatcher: Got Assembly error ${assembly.assembly_id}`,\n    )\n    this.#uppy.log(error)\n\n    this.emit('assembly-error', assembly.assembly_id, error)\n\n    this.#checkAllComplete()\n  }\n\n  #onImportError = (\n    assembly: AssemblyResponse,\n    fileID: string,\n    error: Error,\n  ) => {\n    if (!this.#watching(assembly.assembly_id)) {\n      return\n    }\n\n    // Not sure if we should be doing something when it's just one file failing.\n    // ATM, the only options are 1) ignoring or 2) failing the entire upload.\n    // I think failing the upload is better than silently ignoring.\n    // In the future we should maybe have a way to resolve uploads with some failures,\n    // like returning an object with `{ successful, failed }` uploads.\n    this.#onAssemblyError(assembly, error)\n  }\n\n  #checkAllComplete() {\n    this.#remaining -= 1\n    if (this.#remaining === 0) {\n      // We're done, these listeners can be removed\n      this.#removeListeners()\n      this.#resolve()\n    }\n  }\n\n  #removeListeners() {\n    this.#uppy.off('transloadit:complete', this.#onAssemblyComplete)\n    this.#uppy.off('transloadit:assembly-cancel', this.#onAssemblyCancel)\n    this.#uppy.off('transloadit:assembly-error', this.#onAssemblyError)\n    this.#uppy.off('transloadit:import-error', this.#onImportError)\n  }\n\n  #addListeners() {\n    this.#uppy.on('transloadit:complete', this.#onAssemblyComplete)\n    this.#uppy.on('transloadit:assembly-cancel', this.#onAssemblyCancel)\n    this.#uppy.on('transloadit:assembly-error', this.#onAssemblyError)\n    this.#uppy.on('transloadit:import-error', this.#onImportError)\n  }\n}\n\nexport default TransloaditAssemblyWatcher\n"],"mappings":"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","ignoreList":[]}