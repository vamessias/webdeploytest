{"version":3,"names":["Emitter","has","NetworkError","fetchWithNetworkError","ASSEMBLY_UPLOADING","ASSEMBLY_EXECUTING","ASSEMBLY_COMPLETED","statusOrder","isStatus","status","test","indexOf","_rateLimitedQueue","_classPrivateFieldLooseKey","_fetchWithNetworkError","_previousFetchStatusStillPending","_sse","_onFinished","_connectServerSentEvents","_onError","_beginPolling","_fetchStatus","_diffStatus","TransloaditAssembly","constructor","assembly","rateLimitedQueue","Object","defineProperty","value","_diffStatus2","_fetchStatus2","_beginPolling2","_onError2","_connectServerSentEvents2","_onFinished2","writable","pollInterval","closed","_classPrivateFieldLooseBase","wrapPromiseFunction","connect","update","diff","updateStatus","next","close","clearInterval","emit","EventSource","websocket_url","assembly_id","addEventListener","e","data","file","JSON","parse","uploads","push","_this$status$results","_this$status$results$","stepName","result","results","details","Error","assemblyOrError","assign","message","setInterval","_temp","isPaused","response","assembly_ssl_url","rateLimit","ok","statusText","json","err","prev","prevStatus","nextStatus","error","nowExecuting","keys","filter","upload","forEach","nextResults","prevResults","n","some","p","id","undefined"],"sources":["Assembly.ts"],"sourcesContent":["import Emitter from 'component-emitter'\nimport has from '@uppy/utils/lib/hasProperty'\nimport NetworkError from '@uppy/utils/lib/NetworkError'\nimport fetchWithNetworkError from '@uppy/utils/lib/fetchWithNetworkError'\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore untyped\nimport type {\n  RateLimitedQueue,\n  WrapPromiseFunctionType,\n} from '@uppy/utils/lib/RateLimitedQueue'\nimport type { AssemblyResponse } from './index.ts'\n\nconst ASSEMBLY_UPLOADING = 'ASSEMBLY_UPLOADING'\nconst ASSEMBLY_EXECUTING = 'ASSEMBLY_EXECUTING'\nconst ASSEMBLY_COMPLETED = 'ASSEMBLY_COMPLETED'\n\nconst statusOrder = [ASSEMBLY_UPLOADING, ASSEMBLY_EXECUTING, ASSEMBLY_COMPLETED]\n\n/**\n * Check that an assembly status is equal to or larger than some desired status.\n * It checks for things that are larger so that a comparison like this works,\n * when the old assembly status is UPLOADING but the new is FINISHED:\n *\n * !isStatus(oldStatus, ASSEMBLY_EXECUTING) && isStatus(newState, ASSEMBLY_EXECUTING)\n *\n * …so that we can emit the 'executing' event even if the execution step was so\n * fast that we missed it.\n */\nfunction isStatus(status: string, test: string) {\n  return statusOrder.indexOf(status) >= statusOrder.indexOf(test)\n}\n\nclass TransloaditAssembly extends Emitter {\n  #rateLimitedQueue: RateLimitedQueue\n\n  #fetchWithNetworkError: WrapPromiseFunctionType<typeof fetchWithNetworkError>\n\n  #previousFetchStatusStillPending = false\n\n  #sse: EventSource | null = null\n\n  status: AssemblyResponse\n\n  pollInterval: ReturnType<typeof setInterval> | null\n\n  closed: boolean\n\n  constructor(assembly: AssemblyResponse, rateLimitedQueue: RateLimitedQueue) {\n    super()\n\n    // The current assembly status.\n    this.status = assembly\n    // The interval timer for full status updates.\n    this.pollInterval = null\n    // Whether this assembly has been closed (finished or errored)\n    this.closed = false\n\n    this.#rateLimitedQueue = rateLimitedQueue\n    this.#fetchWithNetworkError = rateLimitedQueue.wrapPromiseFunction(\n      fetchWithNetworkError,\n    )\n  }\n\n  connect(): void {\n    this.#connectServerSentEvents()\n    this.#beginPolling()\n  }\n\n  #onFinished() {\n    this.emit('finished')\n    this.close()\n  }\n\n  #connectServerSentEvents() {\n    this.#sse = new EventSource(\n      `${this.status.websocket_url}?assembly=${this.status.assembly_id}`,\n    )\n\n    this.#sse.addEventListener('open', () => {\n      clearInterval(this.pollInterval!)\n      this.pollInterval = null\n    })\n\n    /*\n     * The event \"message\" is a special case, as it\n     * will capture events without an event field\n     * as well as events that have the specific type\n     * other event type.\n     */\n    this.#sse.addEventListener('message', (e) => {\n      if (e.data === 'assembly_finished') {\n        this.#onFinished()\n      }\n\n      if (e.data === 'assembly_uploading_finished') {\n        this.emit('executing')\n      }\n\n      if (e.data === 'assembly_upload_meta_data_extracted') {\n        this.emit('metadata')\n        this.#fetchStatus({ diff: false })\n      }\n    })\n\n    this.#sse.addEventListener('assembly_upload_finished', (e) => {\n      const file = JSON.parse(e.data)\n      this.status.uploads.push(file)\n      this.emit('upload', file)\n    })\n\n    this.#sse.addEventListener('assembly_result_finished', (e) => {\n      const [stepName, result] = JSON.parse(e.data)\n      ;(this.status.results[stepName] ??= []).push(result)\n      this.emit('result', stepName, result)\n    })\n\n    this.#sse.addEventListener('assembly_execution_progress', (e) => {\n      const details = JSON.parse(e.data)\n      this.emit('execution-progress', details)\n    })\n\n    this.#sse.addEventListener('assembly_error', (e) => {\n      try {\n        this.#onError(JSON.parse(e.data))\n      } catch {\n        this.#onError(new Error(e.data))\n      }\n      // Refetch for updated status code\n      this.#fetchStatus({ diff: false })\n    })\n  }\n\n  #onError(assemblyOrError: AssemblyResponse | NetworkError | Error) {\n    this.emit(\n      'error',\n      Object.assign(new Error(assemblyOrError.message), assemblyOrError),\n    )\n    this.close()\n  }\n\n  /**\n   * Begin polling for assembly status changes. This sends a request to the\n   * assembly status endpoint every so often, if SSE connection failed.\n   * If the SSE connection fails or takes a long time, we won't miss any\n   * events.\n   */\n  #beginPolling() {\n    this.pollInterval = setInterval(() => {\n      this.#fetchStatus()\n    }, 2000)\n  }\n\n  /**\n   * Reload assembly status. Useful if SSE doesn't work.\n   *\n   * Pass `diff: false` to avoid emitting diff events, instead only emitting\n   * 'status'.\n   */\n  async #fetchStatus({ diff = true } = {}) {\n    if (\n      this.closed ||\n      this.#rateLimitedQueue.isPaused ||\n      this.#previousFetchStatusStillPending\n    )\n      return\n\n    try {\n      this.#previousFetchStatusStillPending = true\n      const response = await this.#fetchWithNetworkError(\n        this.status.assembly_ssl_url,\n      )\n      this.#previousFetchStatusStillPending = false\n\n      if (this.closed) return\n\n      if (response.status === 429) {\n        this.#rateLimitedQueue.rateLimit(2_000)\n        return\n      }\n\n      if (!response.ok) {\n        this.#onError(new NetworkError(response.statusText))\n        return\n      }\n\n      const status = await response.json()\n\n      // Avoid updating if we closed during this request's lifetime.\n      if (this.closed) return\n      this.emit('status', status)\n\n      if (diff) {\n        this.updateStatus(status)\n      } else {\n        this.status = status\n      }\n    } catch (err) {\n      this.#onError(err)\n    }\n  }\n\n  update(): Promise<void> {\n    return this.#fetchStatus({ diff: true })\n  }\n\n  /**\n   * Update this assembly's status with a full new object. Events will be\n   * emitted for status changes, new files, and new results.\n   */\n  updateStatus(next: AssemblyResponse): void {\n    this.#diffStatus(this.status, next)\n    this.status = next\n  }\n\n  /**\n   * Diff two assembly statuses, and emit the events necessary to go from `prev`\n   * to `next`.\n   */\n  #diffStatus(prev: AssemblyResponse, next: AssemblyResponse) {\n    const prevStatus = prev.ok\n    const nextStatus = next.ok\n\n    if (next.error && !prev.error) {\n      return this.#onError(next)\n    }\n\n    // Desired emit order:\n    //  - executing\n    //  - (n × upload)\n    //  - metadata\n    //  - (m × result)\n    //  - finished\n    // The below checks run in this order, that way even if we jump from\n    // UPLOADING straight to FINISHED all the events are emitted as expected.\n\n    const nowExecuting =\n      isStatus(nextStatus, ASSEMBLY_EXECUTING) &&\n      !isStatus(prevStatus, ASSEMBLY_EXECUTING)\n    if (nowExecuting) {\n      // Without SSE, this is our only way to tell if uploading finished.\n      // Hence, we emit this just before the 'upload's and before the 'metadata'\n      // event for the most intuitive ordering, corresponding to the _usual_\n      // ordering (if not guaranteed) that you'd get on SSE.\n      this.emit('executing')\n    }\n\n    // Only emit if the upload is new (not in prev.uploads).\n    Object.keys(next.uploads)\n      .filter((upload) => !has(prev.uploads, upload))\n      .forEach((upload) => {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore either the types are wrong or the tests are wrong.\n        // types think next.uploads is an array, but the tests pass an object.\n        this.emit('upload', next.uploads[upload])\n      })\n\n    if (nowExecuting) {\n      this.emit('metadata')\n    }\n\n    // Find new results.\n    Object.keys(next.results).forEach((stepName) => {\n      const nextResults = next.results[stepName]\n      const prevResults = prev.results[stepName]\n\n      nextResults\n        .filter((n) => !prevResults || !prevResults.some((p) => p.id === n.id))\n        .forEach((result) => {\n          this.emit('result', stepName, result)\n        })\n    })\n\n    if (\n      isStatus(nextStatus, ASSEMBLY_COMPLETED) &&\n      !isStatus(prevStatus, ASSEMBLY_COMPLETED)\n    ) {\n      this.emit('finished')\n    }\n\n    return undefined\n  }\n\n  /**\n   * Stop updating this assembly.\n   */\n  close(): void {\n    this.closed = true\n    if (this.#sse) {\n      this.#sse.close()\n      this.#sse = null\n    }\n    clearInterval(this.pollInterval!)\n    this.pollInterval = null\n  }\n}\n\nexport default TransloaditAssembly\n"],"mappings":"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","ignoreList":[]}