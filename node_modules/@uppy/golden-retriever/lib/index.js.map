{"version":3,"names":["throttle","BasePlugin","ServiceWorkerStore","IndexedDBStore","MetaDataStore","packageJson","defaultOptions","expires","serviceWorker","GoldenRetriever","constructor","uppy","opts","addBlobToStores","file","isRemote","put","catch","err","log","removeBlobFromStores","delete","id","replaceBlobInStores","handleRestoreConfirmed","currentUploads","getState","resumeAll","Object","keys","forEach","uploadId","restore","setState","recoveredState","abortRestore","fileIDs","files","deleteBlobs","then","length","cancelAll","cleanup","handleComplete","_ref","successful","map","restoreBlobs","getFiles","Promise","all","loadFileBlobsFromServiceWorker","loadFileBlobsFromIndexedDB","resultingArrayOfObjects","blobs","onBlobsLoaded","type","storeName","getID","indexedDB","saveFilesStateToLocalStorage","bind","leading","trailing","restoreState","savedState","load","savedPluginData","pluginData","getWaitingFiles","waitingFiles","progress","uploadStarted","getUploadingFiles","uploadingFiles","uploadIDs","uploadID","filesInUpload","fileID","getFile","filesToSave","fileToSaveEntries","entries","filesToSaveWithoutData","fromEntries","_ref2","fileInfo","isRestored","data","preview","emit","assign","save","resolve","list","numberOfFilesRecovered","obsoleteBlobs","updatedFiles","originalFile","push","cachedData","updatedFileData","isGhost","_this$ServiceWorkerSt","_this$ServiceWorkerSt2","_this$IndexedDBStore","install","on","uninstall","off","VERSION","version"],"sources":["index.ts"],"sourcesContent":["import throttle from 'lodash/throttle.js'\nimport BasePlugin from '@uppy/core/lib/BasePlugin.js'\nimport type { PluginOpts, DefinePluginOpts } from '@uppy/core/lib/BasePlugin.js'\nimport type { Body, Meta, UppyFile } from '@uppy/utils/lib/UppyFile'\nimport type Uppy from '@uppy/core'\nimport type { UploadResult } from '@uppy/core'\nimport ServiceWorkerStore, {\n  type ServiceWorkerStoredFile,\n} from './ServiceWorkerStore.ts'\nimport IndexedDBStore from './IndexedDBStore.ts'\nimport MetaDataStore from './MetaDataStore.ts'\n\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore We don't want TS to generate types for the package.json\nimport packageJson from '../package.json'\n\ndeclare module '@uppy/core' {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  export interface UppyEventMap<M extends Meta, B extends Body> {\n    // TODO: remove this event\n    'restore:get-data': (fn: (data: Record<string, unknown>) => void) => void\n  }\n}\n\nexport interface GoldenRetrieverOptions extends PluginOpts {\n  expires?: number\n  serviceWorker?: boolean\n  indexedDB?: {\n    name?: string\n    version?: number\n  }\n}\n\nconst defaultOptions = {\n  expires: 24 * 60 * 60 * 1000, // 24 hours\n  serviceWorker: false,\n}\n\ntype Opts = DefinePluginOpts<\n  GoldenRetrieverOptions,\n  keyof typeof defaultOptions\n>\n\n/**\n * The GoldenRetriever plugin — restores selected files and resumes uploads\n * after a closed tab or a browser crash!\n *\n * Uses localStorage, IndexedDB and ServiceWorker to do its magic, read more:\n * https://uppy.io/blog/2017/07/golden-retriever/\n */\nexport default class GoldenRetriever<\n  M extends Meta,\n  B extends Body,\n> extends BasePlugin<Opts, M, B> {\n  static VERSION = packageJson.version\n\n  MetaDataStore: MetaDataStore<M, B>\n\n  ServiceWorkerStore: ServiceWorkerStore<M, B> | null\n\n  IndexedDBStore: IndexedDBStore\n\n  savedPluginData?: Record<string, unknown>\n\n  constructor(uppy: Uppy<M, B>, opts?: GoldenRetrieverOptions) {\n    super(uppy, { ...defaultOptions, ...opts })\n    this.type = 'debugger'\n    this.id = this.opts.id || 'GoldenRetriever'\n\n    this.MetaDataStore = new MetaDataStore({\n      expires: this.opts.expires,\n      storeName: uppy.getID(),\n    })\n    this.ServiceWorkerStore = null\n    if (this.opts.serviceWorker) {\n      this.ServiceWorkerStore = new ServiceWorkerStore({\n        storeName: uppy.getID(),\n      })\n    }\n    this.IndexedDBStore = new IndexedDBStore({\n      expires: this.opts.expires,\n      ...(this.opts.indexedDB || {}),\n      storeName: uppy.getID(),\n    })\n\n    this.saveFilesStateToLocalStorage = throttle(\n      this.saveFilesStateToLocalStorage.bind(this),\n      500,\n      { leading: true, trailing: true },\n    )\n    this.restoreState = this.restoreState.bind(this)\n    this.loadFileBlobsFromServiceWorker =\n      this.loadFileBlobsFromServiceWorker.bind(this)\n    this.loadFileBlobsFromIndexedDB = this.loadFileBlobsFromIndexedDB.bind(this)\n    this.onBlobsLoaded = this.onBlobsLoaded.bind(this)\n  }\n\n  restoreState(): void {\n    const savedState = this.MetaDataStore.load()\n    if (savedState) {\n      this.uppy.log('[GoldenRetriever] Recovered some state from Local Storage')\n      this.uppy.setState({\n        currentUploads: savedState.currentUploads || {},\n        files: savedState.files || {},\n        recoveredState: savedState,\n      })\n      this.savedPluginData = savedState.pluginData\n    }\n  }\n\n  /**\n   * Get file objects that are currently waiting: they've been selected,\n   * but aren't yet being uploaded.\n   */\n  getWaitingFiles(): Record<string, UppyFile<M, B>> {\n    const waitingFiles: Record<string, UppyFile<M, B>> = {}\n\n    this.uppy.getFiles().forEach((file) => {\n      if (!file.progress || !file.progress.uploadStarted) {\n        waitingFiles[file.id] = file\n      }\n    })\n\n    return waitingFiles\n  }\n\n  /**\n   * Get file objects that are currently being uploaded. If a file has finished\n   * uploading, but the other files in the same batch have not, the finished\n   * file is also returned.\n   */\n  getUploadingFiles(): Record<string, UppyFile<M, B>> {\n    const uploadingFiles: Record<string, UppyFile<M, B>> = {}\n\n    const { currentUploads } = this.uppy.getState()\n    if (currentUploads) {\n      const uploadIDs = Object.keys(currentUploads)\n      uploadIDs.forEach((uploadID) => {\n        const filesInUpload = currentUploads[uploadID].fileIDs\n        filesInUpload.forEach((fileID) => {\n          uploadingFiles[fileID] = this.uppy.getFile(fileID)\n        })\n      })\n    }\n\n    return uploadingFiles\n  }\n\n  saveFilesStateToLocalStorage(): void {\n    const filesToSave = {\n      ...this.getWaitingFiles(),\n      ...this.getUploadingFiles(),\n    }\n    const fileToSaveEntries = Object.entries(filesToSave)\n\n    // If all files have been removed by the user, clear recovery state\n    if (fileToSaveEntries.length === 0) {\n      if (this.uppy.getState().recoveredState !== null) {\n        this.uppy.setState({ recoveredState: null })\n      }\n      MetaDataStore.cleanup(this.uppy.opts.id)\n      return\n    }\n\n    // We dont’t need to store file.data on local files, because the actual blob will be restored later,\n    // and we want to avoid having weird properties in the serialized object.\n    // Also adding file.isRestored to all files, since they will be restored from local storage\n    const filesToSaveWithoutData = Object.fromEntries(\n      fileToSaveEntries.map(([id, fileInfo]) => [\n        id,\n        fileInfo.isRemote ?\n          {\n            ...fileInfo,\n            isRestored: true,\n          }\n        : {\n            ...fileInfo,\n            isRestored: true,\n            data: null,\n            preview: null,\n          },\n      ]),\n    )\n\n    const pluginData = {}\n    // TODO Remove this,\n    // Other plugins can attach a restore:get-data listener that receives this callback.\n    // Plugins can then use this callback (sync) to provide data to be stored.\n    this.uppy.emit('restore:get-data', (data) => {\n      Object.assign(pluginData, data)\n    })\n\n    const { currentUploads } = this.uppy.getState()\n\n    this.MetaDataStore.save({\n      currentUploads,\n      files: filesToSaveWithoutData,\n      pluginData,\n    })\n  }\n\n  loadFileBlobsFromServiceWorker(): Promise<\n    ServiceWorkerStoredFile<M, B> | Record<string, unknown>\n  > {\n    if (!this.ServiceWorkerStore) {\n      return Promise.resolve({})\n    }\n\n    return this.ServiceWorkerStore.list()\n      .then((blobs) => {\n        const numberOfFilesRecovered = Object.keys(blobs).length\n\n        if (numberOfFilesRecovered > 0) {\n          this.uppy.log(\n            `[GoldenRetriever] Successfully recovered ${numberOfFilesRecovered} blobs from Service Worker!`,\n          )\n          return blobs\n        }\n        this.uppy.log(\n          '[GoldenRetriever] No blobs found in Service Worker, trying IndexedDB now...',\n        )\n        return {}\n      })\n      .catch((err) => {\n        this.uppy.log(\n          '[GoldenRetriever] Failed to recover blobs from Service Worker',\n          'warning',\n        )\n        this.uppy.log(err)\n        return {}\n      })\n  }\n\n  loadFileBlobsFromIndexedDB(): ReturnType<IndexedDBStore['list']> {\n    return this.IndexedDBStore.list()\n      .then((blobs) => {\n        const numberOfFilesRecovered = Object.keys(blobs).length\n\n        if (numberOfFilesRecovered > 0) {\n          this.uppy.log(\n            `[GoldenRetriever] Successfully recovered ${numberOfFilesRecovered} blobs from IndexedDB!`,\n          )\n          return blobs\n        }\n        this.uppy.log('[GoldenRetriever] No blobs found in IndexedDB')\n        return {}\n      })\n      .catch((err) => {\n        this.uppy.log(\n          '[GoldenRetriever] Failed to recover blobs from IndexedDB',\n          'warning',\n        )\n        this.uppy.log(err)\n        return {}\n      })\n  }\n\n  onBlobsLoaded(blobs: Record<string, Blob>): void {\n    const obsoleteBlobs: string[] = []\n    const updatedFiles = { ...this.uppy.getState().files }\n\n    // Loop through blobs that we can restore, add blobs to file objects\n    Object.keys(blobs).forEach((fileID) => {\n      const originalFile = this.uppy.getFile(fileID)\n      if (!originalFile) {\n        obsoleteBlobs.push(fileID)\n        return\n      }\n\n      const cachedData = blobs[fileID]\n\n      const updatedFileData = {\n        data: cachedData,\n        isRestored: true,\n        isGhost: false,\n      }\n      updatedFiles[fileID] = { ...originalFile, ...updatedFileData }\n    })\n\n    // Loop through files that we can’t restore fully — we only have meta, not blobs,\n    // set .isGhost on them, also set isRestored to all files\n    Object.keys(updatedFiles).forEach((fileID) => {\n      if (updatedFiles[fileID].data === null) {\n        updatedFiles[fileID] = {\n          ...updatedFiles[fileID],\n          isGhost: true,\n        }\n      }\n    })\n\n    this.uppy.setState({\n      files: updatedFiles,\n    })\n\n    this.uppy.emit('restored', this.savedPluginData)\n\n    if (obsoleteBlobs.length) {\n      this.deleteBlobs(obsoleteBlobs)\n        .then(() => {\n          this.uppy.log(\n            `[GoldenRetriever] Cleaned up ${obsoleteBlobs.length} old files`,\n          )\n        })\n        .catch((err) => {\n          this.uppy.log(\n            `[GoldenRetriever] Could not clean up ${obsoleteBlobs.length} old files`,\n            'warning',\n          )\n          this.uppy.log(err)\n        })\n    }\n  }\n\n  async deleteBlobs(fileIDs: string[]): Promise<void> {\n    await Promise.all(\n      fileIDs.map(\n        (id) =>\n          this.ServiceWorkerStore?.delete(id) ??\n          this.IndexedDBStore?.delete(id),\n      ),\n    )\n  }\n\n  addBlobToStores = (file: UppyFile<M, B>): void => {\n    if (file.isRemote) return\n\n    if (this.ServiceWorkerStore) {\n      this.ServiceWorkerStore.put(file).catch((err) => {\n        this.uppy.log('[GoldenRetriever] Could not store file', 'warning')\n        this.uppy.log(err)\n      })\n    }\n\n    this.IndexedDBStore.put(file).catch((err) => {\n      this.uppy.log('[GoldenRetriever] Could not store file', 'warning')\n      this.uppy.log(err)\n    })\n  }\n\n  removeBlobFromStores = (file: UppyFile<M, B>): void => {\n    if (this.ServiceWorkerStore) {\n      this.ServiceWorkerStore.delete(file.id).catch((err) => {\n        this.uppy.log('[GoldenRetriever] Failed to remove file', 'warning')\n        this.uppy.log(err)\n      })\n    }\n    this.IndexedDBStore.delete(file.id).catch((err) => {\n      this.uppy.log('[GoldenRetriever] Failed to remove file', 'warning')\n      this.uppy.log(err)\n    })\n  }\n\n  replaceBlobInStores = (file: UppyFile<M, B>): void => {\n    this.removeBlobFromStores(file)\n    this.addBlobToStores(file)\n  }\n\n  handleRestoreConfirmed = (): void => {\n    this.uppy.log('[GoldenRetriever] Restore confirmed, proceeding...')\n    // start all uploads again when file blobs are restored\n    const { currentUploads } = this.uppy.getState()\n    if (currentUploads) {\n      this.uppy.resumeAll()\n      Object.keys(currentUploads).forEach((uploadId) => {\n        this.uppy.restore(uploadId)\n      })\n    }\n    this.uppy.setState({ recoveredState: null })\n  }\n\n  abortRestore = (): void => {\n    this.uppy.log('[GoldenRetriever] Aborting restore...')\n\n    const fileIDs = Object.keys(this.uppy.getState().files)\n    this.deleteBlobs(fileIDs)\n      .then(() => {\n        this.uppy.log(`[GoldenRetriever] Removed ${fileIDs.length} files`)\n      })\n      .catch((err) => {\n        this.uppy.log(\n          `[GoldenRetriever] Could not remove ${fileIDs.length} files`,\n          'warning',\n        )\n        this.uppy.log(err)\n      })\n\n    this.uppy.cancelAll()\n    this.uppy.setState({ recoveredState: null })\n    MetaDataStore.cleanup(this.uppy.opts.id)\n  }\n\n  handleComplete = ({ successful }: UploadResult<M, B>): void => {\n    const fileIDs = successful!.map((file) => file.id)\n    this.deleteBlobs(fileIDs)\n      .then(() => {\n        this.uppy.log(\n          `[GoldenRetriever] Removed ${successful!.length} files that finished uploading`,\n        )\n      })\n      .catch((err) => {\n        this.uppy.log(\n          `[GoldenRetriever] Could not remove ${successful!.length} files that finished uploading`,\n          'warning',\n        )\n        this.uppy.log(err)\n      })\n\n    this.uppy.setState({ recoveredState: null })\n    MetaDataStore.cleanup(this.uppy.opts.id)\n  }\n\n  restoreBlobs = (): void => {\n    if (this.uppy.getFiles().length > 0) {\n      Promise.all([\n        this.loadFileBlobsFromServiceWorker(),\n        this.loadFileBlobsFromIndexedDB(),\n      ]).then((resultingArrayOfObjects) => {\n        const blobs = {\n          ...resultingArrayOfObjects[0],\n          ...resultingArrayOfObjects[1],\n        } as Record<string, Blob>\n        this.onBlobsLoaded(blobs)\n      })\n    } else {\n      this.uppy.log(\n        '[GoldenRetriever] No files need to be loaded, only restoring processing state...',\n      )\n    }\n  }\n\n  install(): void {\n    this.restoreState()\n    this.restoreBlobs()\n\n    this.uppy.on('file-added', this.addBlobToStores)\n    // @ts-expect-error this is typed in @uppy/image-editor and we can't access those types.\n    this.uppy.on('file-editor:complete', this.replaceBlobInStores)\n    this.uppy.on('file-removed', this.removeBlobFromStores)\n    // TODO: the `state-update` is bad practise. It fires on any state change in Uppy\n    // or any state change in any of the plugins. We should to able to only listen\n    // for the state changes we need, somehow.\n    this.uppy.on('state-update', this.saveFilesStateToLocalStorage)\n    this.uppy.on('restore-confirmed', this.handleRestoreConfirmed)\n    this.uppy.on('restore-canceled', this.abortRestore)\n    this.uppy.on('complete', this.handleComplete)\n  }\n\n  uninstall(): void {\n    this.uppy.off('file-added', this.addBlobToStores)\n    // @ts-expect-error this is typed in @uppy/image-editor and we can't access those types.\n    this.uppy.off('file-editor:complete', this.replaceBlobInStores)\n    this.uppy.off('file-removed', this.removeBlobFromStores)\n    this.uppy.off('state-update', this.saveFilesStateToLocalStorage)\n    this.uppy.off('restore-confirmed', this.handleRestoreConfirmed)\n    this.uppy.off('restore-canceled', this.abortRestore)\n    this.uppy.off('complete', this.handleComplete)\n  }\n}\n"],"mappings":"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","ignoreList":[]}