{"version":3,"names":["indexedDB","window","webkitIndexedDB","mozIndexedDB","OIndexedDB","msIndexedDB","isSupported","DB_NAME","STORE_NAME","DEFAULT_EXPIRY","DB_VERSION","MiB","migrateExpiration","store","request","openCursor","onsuccess","event","cursor","target","result","entry","value","expires","Date","now","update","connect","dbName","open","Promise","resolve","reject","onupgradeneeded","db","transaction","currentTarget","oldVersion","createObjectStore","keyPath","createIndex","unique","objectStore","oncomplete","onerror","waitForRequest","cleanedUp","_ready","_classPrivateFieldLooseKey","IndexedDBStore","constructor","opts","Object","defineProperty","writable","storeName","maxFileSize","maxTotalSize","name","createConnection","_classPrivateFieldLooseBase","cleanup","then","ready","key","fileID","list","index","getAll","IDBKeyRange","only","files","fromEntries","map","file","data","get","id","getSize","size","continue","Error","put","add","delete","upperBound","close"],"sources":["IndexedDBStore.ts"],"sourcesContent":["import type { UppyFile } from '@uppy/utils/lib/UppyFile'\n\nconst indexedDB =\n  typeof window !== 'undefined' &&\n  (window.indexedDB ||\n    // @ts-expect-error unknown\n    window.webkitIndexedDB ||\n    // @ts-expect-error unknown\n    window.mozIndexedDB ||\n    // @ts-expect-error unknown\n    window.OIndexedDB ||\n    // @ts-expect-error unknown\n    window.msIndexedDB)\n\nconst isSupported = !!indexedDB\n\nconst DB_NAME = 'uppy-blobs'\nconst STORE_NAME = 'files' // maybe have a thumbnail store in the future\nconst DEFAULT_EXPIRY = 24 * 60 * 60 * 1000 // 24 hours\nconst DB_VERSION = 3\nconst MiB = 0x10_00_00\n\n/**\n * Set default `expires` dates on existing stored blobs.\n */\nfunction migrateExpiration(store: IDBObjectStore) {\n  const request = store.openCursor()\n  request.onsuccess = (event) => {\n    const cursor = (event.target as IDBRequest).result\n    if (!cursor) {\n      return\n    }\n    const entry = cursor.value\n    entry.expires = Date.now() + DEFAULT_EXPIRY\n    cursor.update(entry)\n  }\n}\n\nfunction connect(dbName: string): Promise<IDBDatabase> {\n  const request = (indexedDB as IDBFactory).open(dbName, DB_VERSION)\n  return new Promise((resolve, reject) => {\n    request.onupgradeneeded = (event) => {\n      const db: IDBDatabase = (event.target as IDBOpenDBRequest).result\n      // eslint-disable-next-line prefer-destructuring\n      const transaction = (event.currentTarget as IDBOpenDBRequest)\n        .transaction as IDBTransaction\n\n      if (event.oldVersion < 2) {\n        // Added in v2: DB structure changed to a single shared object store\n        const store = db.createObjectStore(STORE_NAME, { keyPath: 'id' })\n        store.createIndex('store', 'store', { unique: false })\n      }\n\n      if (event.oldVersion < 3) {\n        // Added in v3\n        const store = transaction.objectStore(STORE_NAME)\n        store.createIndex('expires', 'expires', { unique: false })\n\n        migrateExpiration(store)\n      }\n\n      transaction.oncomplete = () => {\n        resolve(db)\n      }\n    }\n    request.onsuccess = (event) => {\n      resolve((event.target as IDBRequest).result)\n    }\n    request.onerror = reject\n  })\n}\n\nfunction waitForRequest<T>(request: IDBRequest): Promise<T> {\n  return new Promise((resolve, reject) => {\n    request.onsuccess = (event) => {\n      resolve((event.target as IDBRequest).result)\n    }\n    request.onerror = reject\n  })\n}\n\ntype IndexedDBStoredFile = {\n  id: string\n  fileID: string\n  store: string\n  expires: number\n  data: Blob\n}\n\ntype IndexedDBStoreOptions = {\n  dbName?: string\n  storeName?: string\n  expires?: number\n  maxFileSize?: number\n  maxTotalSize?: number\n}\n\nlet cleanedUp = false\nclass IndexedDBStore {\n  #ready: Promise<IDBDatabase> | IDBDatabase\n\n  opts: Required<IndexedDBStoreOptions>\n\n  name: string\n\n  static isSupported: boolean\n\n  constructor(opts?: IndexedDBStoreOptions) {\n    this.opts = {\n      dbName: DB_NAME,\n      storeName: 'default',\n      expires: DEFAULT_EXPIRY, // 24 hours\n      maxFileSize: 10 * MiB,\n      maxTotalSize: 300 * MiB,\n      ...opts,\n    }\n\n    this.name = this.opts.storeName\n\n    const createConnection = async () => {\n      const db = await connect(this.opts.dbName)\n      this.#ready = db\n      return db\n    }\n\n    if (!cleanedUp) {\n      cleanedUp = true\n      this.#ready = IndexedDBStore.cleanup().then(\n        createConnection,\n        createConnection,\n      )\n    } else {\n      this.#ready = createConnection()\n    }\n  }\n\n  get ready(): Promise<IDBDatabase> {\n    return Promise.resolve(this.#ready)\n  }\n\n  key(fileID: string): string {\n    return `${this.name}!${fileID}`\n  }\n\n  /**\n   * List all file blobs currently in the store.\n   */\n  async list(): Promise<Record<string, IndexedDBStoredFile['data']>> {\n    const db = await this.#ready\n    const transaction = db.transaction([STORE_NAME], 'readonly')\n    const store = transaction.objectStore(STORE_NAME)\n    const request = store.index('store').getAll(IDBKeyRange.only(this.name))\n    const files = await waitForRequest<IndexedDBStoredFile[]>(request)\n    return Object.fromEntries(files.map((file) => [file.fileID, file.data]))\n  }\n\n  /**\n   * Get one file blob from the store.\n   */\n  async get(fileID: string): Promise<{ id: string; data: Blob }> {\n    const db = await this.#ready\n    const transaction = db.transaction([STORE_NAME], 'readonly')\n    const request = transaction.objectStore(STORE_NAME).get(this.key(fileID))\n    const { data } = await waitForRequest<{\n      data: { data: Blob; fileID: string }\n    }>(request)\n    return {\n      id: data.fileID,\n      data: data.data,\n    }\n  }\n\n  /**\n   * Get the total size of all stored files.\n   */\n  async getSize(): Promise<number> {\n    const db = await this.#ready\n    const transaction = db.transaction([STORE_NAME], 'readonly')\n    const store = transaction.objectStore(STORE_NAME)\n    const request = store.index('store').openCursor(IDBKeyRange.only(this.name))\n    return new Promise((resolve, reject) => {\n      let size = 0\n      request.onsuccess = (event) => {\n        const cursor = (event.target as IDBRequest).result\n        if (cursor) {\n          size += cursor.value.data.size\n          cursor.continue()\n        } else {\n          resolve(size)\n        }\n      }\n      request.onerror = () => {\n        reject(new Error('Could not retrieve stored blobs size'))\n      }\n    })\n  }\n\n  /**\n   * Save a file in the store.\n   */\n  async put<T>(file: UppyFile<any, any>): Promise<T> {\n    if (file.data.size > this.opts.maxFileSize) {\n      throw new Error('File is too big to store.')\n    }\n    const size = await this.getSize()\n    if (size > this.opts.maxTotalSize) {\n      throw new Error('No space left')\n    }\n    const db = await this.#ready\n    const transaction = db.transaction([STORE_NAME], 'readwrite')\n    const request = transaction.objectStore(STORE_NAME).add({\n      id: this.key(file.id),\n      fileID: file.id,\n      store: this.name,\n      expires: Date.now() + this.opts.expires,\n      data: file.data,\n    })\n    return waitForRequest(request)\n  }\n\n  /**\n   * Delete a file blob from the store.\n   */\n  async delete(fileID: string): Promise<unknown> {\n    const db = await this.#ready\n    const transaction = db.transaction([STORE_NAME], 'readwrite')\n    const request = transaction.objectStore(STORE_NAME).delete(this.key(fileID))\n    return waitForRequest(request)\n  }\n\n  /**\n   * Delete all stored blobs that have an expiry date that is before Date.now().\n   * This is a static method because it deletes expired blobs from _all_ Uppy instances.\n   */\n  static async cleanup(): Promise<void> {\n    const db = await connect(DB_NAME)\n    const transaction = db.transaction([STORE_NAME], 'readwrite')\n    const store = transaction.objectStore(STORE_NAME)\n    const request = store\n      .index('expires')\n      .openCursor(IDBKeyRange.upperBound(Date.now()))\n    await new Promise<void>((resolve, reject) => {\n      request.onsuccess = (event) => {\n        const cursor = (event.target as IDBRequest).result\n        if (cursor) {\n          cursor.delete() // Ignoring return value â€¦ it's not terrible if this goes wrong.\n          cursor.continue()\n        } else {\n          resolve()\n        }\n      }\n      request.onerror = reject\n    })\n    db.close()\n  }\n}\n\nIndexedDBStore.isSupported = isSupported\n\nexport default IndexedDBStore\n"],"mappings":"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","ignoreList":[]}