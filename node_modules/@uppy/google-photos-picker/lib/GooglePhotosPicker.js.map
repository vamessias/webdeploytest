{"version":3,"names":["h","UIPlugin","GooglePickerView","GooglePhotosIcon","RequestClient","tokenStorage","packageJson","locale","GooglePhotosPicker","constructor","uppy","opts","type","icon","defaultLocale","handleFilesPicked","files","accessToken","addFiles","map","_ref","id","mimeType","name","rest","source","data","size","isRemote","remote","companionUrl","url","body","fileId","requestClientId","render","storage","pickerType","clientId","onFilesPicked","i18nInit","title","i18n","client","pluginId","provider","companionHeaders","companionCookiesRule","registerRequestClient","install","target","mount","uninstall","unmount","_GooglePhotosPicker","VERSION","version"],"sources":["GooglePhotosPicker.tsx"],"sourcesContent":["import { h } from 'preact'\nimport { UIPlugin, Uppy } from '@uppy/core'\nimport { GooglePickerView } from '@uppy/provider-views'\nimport { GooglePhotosIcon } from '@uppy/provider-views/lib/GooglePicker/icons.js'\nimport {\n  RequestClient,\n  type CompanionPluginOptions,\n  tokenStorage,\n} from '@uppy/companion-client'\n\nimport type { PickedItem } from '@uppy/provider-views/lib/GooglePicker/googlePicker.js'\nimport type { Body, Meta } from '@uppy/utils/lib/UppyFile'\nimport type { AsyncStore, BaseProviderPlugin } from '@uppy/core/lib/Uppy.js'\n\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore We don't want TS to generate types for the package.json\nimport packageJson from '../package.json'\nimport locale from './locale.ts'\n\nexport type GooglePhotosPickerOptions = CompanionPluginOptions & {\n  clientId: string\n}\n\nexport default class GooglePhotosPicker<\n    M extends Meta & { width: number; height: number },\n    B extends Body,\n  >\n  extends UIPlugin<GooglePhotosPickerOptions, M, B>\n  implements BaseProviderPlugin\n{\n  static VERSION = packageJson.version\n\n  static requestClientId = GooglePhotosPicker.name\n\n  type = 'acquirer'\n\n  icon = GooglePhotosIcon\n\n  storage: AsyncStore\n\n  defaultLocale = locale\n\n  constructor(uppy: Uppy<M, B>, opts: GooglePhotosPickerOptions) {\n    super(uppy, opts)\n    this.id = this.opts.id || 'GooglePhotosPicker'\n    this.storage = this.opts.storage || tokenStorage\n\n    this.i18nInit()\n    this.title = this.i18n('pluginNameGooglePhotos')\n\n    const client = new RequestClient(uppy, {\n      pluginId: this.id,\n      provider: 'url',\n      companionUrl: this.opts.companionUrl,\n      companionHeaders: this.opts.companionHeaders,\n      companionCookiesRule: this.opts.companionCookiesRule,\n    })\n\n    this.uppy.registerRequestClient(GooglePhotosPicker.requestClientId, client)\n  }\n\n  install(): void {\n    const { target } = this.opts\n    if (target) {\n      this.mount(target, this)\n    }\n  }\n\n  uninstall(): void {\n    this.unmount()\n  }\n\n  private handleFilesPicked = async (\n    files: PickedItem[],\n    accessToken: string,\n  ) => {\n    this.uppy.addFiles(\n      files.map(({ id, mimeType, name, ...rest }) => {\n        return {\n          source: this.id,\n          name,\n          type: mimeType,\n          data: {\n            size: null, // defer to companion to determine size\n          },\n          isRemote: true,\n          remote: {\n            companionUrl: this.opts.companionUrl,\n            url: `${this.opts.companionUrl}/google-picker/get`,\n            body: {\n              fileId: id,\n              accessToken,\n              ...rest,\n            },\n            requestClientId: GooglePhotosPicker.requestClientId,\n          },\n        }\n      }),\n    )\n  }\n\n  render = () => (\n    <GooglePickerView\n      storage={this.storage}\n      pickerType=\"photos\"\n      uppy={this.uppy}\n      clientId={this.opts.clientId}\n      onFilesPicked={this.handleFilesPicked}\n    />\n  )\n}\n"],"mappings":"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","ignoreList":[]}